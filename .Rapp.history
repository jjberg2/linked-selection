traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )
write ( file = traj.file , header.material )
traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )
write ( file = traj.file , header.material )
write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )
my.times
my.freqs
my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )
my.freqs
my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )
my.times
write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )
cat( i ," " )
system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) )
num.sims
seqs <- GetSeqs ( n.sam , num.sims , path )
seqs
2 * N * len.bp * r.bp
len.bp
2 * N * len.bp * mu.bp
Q
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , recom , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
			seqs <- GetSeqs ( n.sam , num.sims , path )#
			lapply ( seqs , CountHaps )#
			my.specs[,(1+(counter-1)*num.sims):(counter*num.sims)]<-spec#
			counter<-counter+1#
			#recover()#
		# }#
	}#
	if (! get.site.density ) return(my.specs)#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}#
}#
SplitPartition <- function ( )#
get.freq.spec<-function(n,num.sims, path){#
	recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		#recover()#
		######
		# if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
#		print(positions[1])#
#		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		colnames(seqs)<-NULL#
		seqs<-t(seqs)#
		these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		mut.freq<-colSums(seqs)#
		freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		return(freq.spec)#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return(freq.specs)#
}#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
num.sims
c
ls()
these.seqs
my.runs
these.seqs
positions <- as.numeric ( these.seqs [[ 1 ]] )
my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )
hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )
len.bp
1
len.bp
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
			seqs <- GetSeqs ( n.sam , num.sims , path )#
			lapply ( seqs , CountHaps )#
			my.specs[,(1+(counter-1)*num.sims):(counter*num.sims)]<-spec#
			counter<-counter+1#
			#recover()#
		# }#
	}#
	if (! get.site.density ) return(my.specs)#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}#
}#
SplitPartition <- function ( )#
get.freq.spec<-function(n,num.sims, path){#
	recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		#recover()#
		######
		# if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
#		print(positions[1])#
#		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		colnames(seqs)<-NULL#
		seqs<-t(seqs)#
		these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		mut.freq<-colSums(seqs)#
		freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		return(freq.spec)#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return(freq.specs)#
}#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 20 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
len.bp
1
len.bp
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
			seqs <- GetSeqs ( n.sam , num.sims , path )#
			lapply ( seqs , CountHaps )#
			my.specs[,(1+(counter-1)*num.sims):(counter*num.sims)]<-spec#
			counter<-counter+1#
			#recover()#
		# }#
	}#
	if (! get.site.density ) return(my.specs)#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}#
}#
SplitPartition <- function ( )#
get.freq.spec<-function(n,num.sims, path){#
	recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		#recover()#
		######
		# if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
#		print(positions[1])#
#		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		colnames(seqs)<-NULL#
		seqs<-t(seqs)#
		these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		mut.freq<-colSums(seqs)#
		freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		return(freq.spec)#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return(freq.specs)#
}#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 20 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
			seqs <- GetSeqs ( n.sam , num.sims , path )#
			lapply ( seqs , CountHaps )#
			my.specs[,(1+(counter-1)*num.sims):(counter*num.sims)]<-spec#
			counter<-counter+1#
			#recover()#
		# }#
	}#
	if (! get.site.density ) return(my.specs)#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}#
}#
SplitPartition <- function ( )#
get.freq.spec<-function(n,num.sims, path){#
	recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		#recover()#
		######
		# if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
#		print(positions[1])#
#		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		colnames(seqs)<-NULL#
		seqs<-t(seqs)#
		these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		mut.freq<-colSums(seqs)#
		freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		return(freq.spec)#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return(freq.specs)#
}#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
len.bp
c
len.bp
c
?lapply
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
			seqs <- GetSeqs ( n.sam , num.sims , path )#
			lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
			my.specs[,(1+(counter-1)*num.sims):(counter*num.sims)]<-spec#
			counter<-counter+1#
			#recover()#
		# }#
	}#
	if (! get.site.density ) return(my.specs)#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
ls()
len.bp
these.seqs
positions <- as.numeric ( these.seqs [[ 1 ]] )
positions
my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )
my.part
hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )
hap.freqs
pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )
hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )
i=1
this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )
this.site
my.part
this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )
this.site
any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) )
new.part <- list ()
for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}
new.part
my.part <- new.part
these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )
these.hap.freqs
pos.cuts
pos.cuts >= positions [ i ]
pos.cuts < positions [ i + 1 ]
pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ]
sort ( unlist ( lapply ( my.part , length ) ) , d = T )
1 : length ( my.part )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			break#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}
i
my.part
this.site
these.seqs
hap.freqs
1 : length ( my.part )
pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ]
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) break#
	}
hap.freqs
pos.cuts >= positions [ i ]
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
hap.freqs
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
1 : length ( my.part )
pos.cuts >= positions [ i ]
pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ]
pos.cuts < positions [ i + 1 ]
positions
i + 1
hap.freqs
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i > length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
i + 1
i > length ( positions )
length ( positions )
i
i == length ( positions )
hap.freqs
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ]
sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		hap.counts <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
		recover()#
	}#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		hap.counts <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
		recover()#
	}#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		hap.counts <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
		recover()#
	}#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
i
these.seqs
i
length ( positions )
hap.freqs
1 : length ( my.part )
pos.cuts >= positions [ i ]
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ]
length ( my.part ) == nrow ( hap.freqs )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
i
i == length ( positions )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs
sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
length ( my.part ) == nrow ( hap.freqs )
hap.freqs [ , pos.cuts >= positions [ i ] ]
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
i
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i == 1008 ) break#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
i
ls
ls()
c
ls()
i=1008
if ( i == length ( positions ) ) {#
			j <- 1#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i < length ( positions ) ) {#
			j <- 2#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}
j
i
i=1009
if ( i == length ( positions ) ) {#
			j <- 1#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i < length ( positions ) ) {#
			j <- 2#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}
j
i=1008
sort ( unlist ( lapply ( my.part , length ) ) , d = T )
pos.cuts >= positions [ i ]
pos.cuts < positions [ i + 1 ]
pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ]
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ]
new.part
options ( error = recover())
options ( error = recover)
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : (length ( positions )-1) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
i=1009
#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}
warnings()
warnings()
warnings()
#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}
my.part
any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) )
positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		hap.counts <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
		recover()#
	}#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
hap.counts
seqs
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		hap.counts <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
		recover()#
	}#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
hap.counts
num.sims
( i - 1 ) * num.sims + 1:num.sims
i=2
( i - 1 ) * num.sims + 1:num.sims
hap.counts <- list ()
i=1
hap.counts [[ ( i - 1 ) * num.sims + 1:num.sims ]] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
hap.counts
hap.counts [[ ( i - 1 ) * num.sims + 1:num.sims ]]
hap.counts <- list (1)
hap.counts
hap.counts [[ ( i - 1 ) * num.sims + 1:num.sims ]] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
lapply ( seqs , CountHaps , len.bp , hap.count.interval )
hap.counts <- list ()
temp <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- temp
hap.counts
hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
hap.counts [[ ( i - 1 ) * num.sims + 1:num.sims ]] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )
c
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	recover()#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
length ( hap.counts)
blah <- Reduce ( mean , hap.counts )
hap.counts
blah <- Reduce ( "+" , hap.counts )
blah
blah <- Reduce ( "mean" , hap.counts )
blah <- Reduce ( "+" , hap.counts )
blah
blah <- Reduce ( "+" , hap.counts ) / length ( hap.counts )
blah
matplot ( blah , type = "l" , lty = 1 , lwd = 1.5)
matplot ( t ( blah ) , type = "l" , lty = 1 , lwd = 1.5)
c
ls()
rm ( list = ls ( ))
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )
num.sims
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	num.sims<-20#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		# if ( get.site.density ) { #
			# system ( paste ( path , "Scripts/msseldir/mssel " , n.sam , " 20 0 " , n.sam , " " , path , "Sims/my.standing" , "." , f.lab , "." , s.lab , "." , N, ".traj 0 -t 200. -r 200. 20000 | grep pos | cut -f 2 -d : >> " , my.file , sep = "" ) )#
		# }	else	{   ##setup for the mo. to do freq. spectrum#
		recover()#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" )
num.sims
c
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 5 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 2000 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( my.runs [[ 1 ]] , n.sam = 20 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 2000 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( my.runs [[ 1 ]] , n.sam = 100 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( marginal.hap.freqs )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
my.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 200 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( my.runs [[ 1 ]] , n.sam = 100 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
hard.sweep
matplot ( t ( hard.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )
standing.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 0.05 , reps = 200 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
standing.sweep <- msHapSims ( standing.runs [[ 1 ]] , n.sam = 20 , f = 0.05 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
matplot ( t ( standing.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )
par ( mfrow = c ( 1 , 2 ) )#
matplot ( t ( hard.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )#
matplot ( t ( standing.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )
standing.sweep <- msHapSims ( standing.runs [[ 1 ]] , n.sam = 100 , f = 0.05 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
par ( mfrow = c ( 1 , 2 ) )#
matplot ( t ( hard.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )#
matplot ( t ( standing.sweep ) , type = "l" , lty = 1 , lwd = 1.5 )
standing.sweep
apply ( standing.sweep , 1 , max)
apply ( hard.sweep , 1 , max)
setwd("~/Documents/Academics/StandingSweeps")#
source ( "Scripts/SweepFromStandingSim.R")#
msHapSims <- function ( runs , n.sam = 2  , f , s , N , path , get.site.density = TRUE , num.sims , len.bp , r.bp , mu.bp , hap.count.interval ) {#
	#recover()#
	options ( "scipen" = 100 , "digits" = 4 )#
	f.lab <- strsplit ( as.character ( f ) , "\\." ) [[ 1 ]] [ 2 ]#
	s.lab <- strsplit ( as.character ( s ) , "\\." ) [[ 1 ]][ 2 ]#
	counter <- 1#
	my.file <- paste ( path , "/mssel_f" , n.sam , "." ,  f.lab , "."  , s.lab , "." , N  , ".out" , sep = "" )#
	system ( paste ( "rm " , my.file ) )#
	#for ( run in 1:5 ) {#
	#	load ( paste ( "run_cond_lost_" , run , ".Robj" , sep = "" ) )#
	hap.counts <- list ()#
	for ( i in 1:nrow ( runs ) ) {#
		my.freqs <- c ( runs [ i , runs [ i , ] > 0 ] , 0 )#
		my.times <- 0 : ( length ( my.freqs ) - 1 ) / ( 4*N  )#
#
		#recover()#
		header.material <- c ( "1" , "1" , paste ( "n:" , length ( my.times ) ) )#
		traj.file <- paste ( path , "/my.standing" , "." , f.lab , "." , s.lab , "." , N , ".traj" , sep = "" )#
		write ( file = traj.file , header.material )#
		write.table ( file = traj.file , cbind ( my.times , my.freqs ) , append = TRUE , sep = "\t" , quot = FALSE , col.nam = FALSE , row.name = FALSE )#
		cat( i ," " )#
		system ( paste ( "Scripts/msseldir/mssel " , n.sam , " " , num.sims , " 0 " , n.sam ,  " " , traj.file ,  " 0 -t " , 2 * N * len.bp * mu.bp , " -r " , 2 * N * len.bp * r.bp , " " , len.bp , " > " , path, "/myseqdata" , sep = "" ) ) #
		seqs <- GetSeqs ( n.sam , num.sims , path )#
		temp <- #
		hap.counts [ ( i - 1 ) * num.sims + 1:num.sims ] <- lapply ( seqs , CountHaps , len.bp , hap.count.interval )#
	}#
	marginal.hap.freqs <- Reduce ( "+" , hap.counts ) / length ( hap.counts )#
	return ( list ( marginal.hap.freqs , hap.counts ) )#
}#
GetSeqs <- function ( n , num.sims , path ) {#
	#recover()#
	a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	polymorph<- seg.sites>0#
	seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	my.seqs <- lapply ( 0 : ( num.sims - 1 ) , function ( iter ) {		#
		positions <- read.table ( paste ( path , "/myseqdata" ,sep = "" ) , skip = 5 + 4 * iter + seq.lines [ iter + 1 ] , nrow = 1 )#
		seqs.raw <- scan ( paste ( path , "/myseqdata" , sep = "" ) , skip = 6 + 4 * iter + seq.lines [ iter + 1 ] , nline = n , what = character ( ) , quiet = TRUE )#
		seqs <- sapply ( seqs.raw , function ( seq ) { as.numeric ( strsplit ( seq , "" ) [[ 1 ]] ) } )#
		colnames ( seqs ) <- NULL#
		seqs <- t ( seqs )#
		list ( positions [ - 1 ] , seqs )#
	})#
	#freq.specs <- rowSums ( freq.specs )#
	return ( my.seqs )#
}#
## needs work#
CountHaps <- function ( these.seqs , len.bp , hap.count.interval ) {#
	#recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) ) { #
			if ( i < length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			if ( i == length ( positions ) ) {#
				hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			}#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		if ( i < length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} #
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
CountHapsNoSing <- function ( these.seqs , len.bp , hap.count.interval ) {#
	recover ()#
	positions <- as.numeric ( these.seqs [[ 1 ]] )#
	my.part <- list ( seq ( 1 : nrow ( these.seqs [[ 2 ]] ) ) )#
	hap.freqs <- matrix ( 0 , nrow = nrow ( these.seqs [[ 2 ]] ) , ncol = len.bp / hap.count.interval + 1 )#
	pos.cuts <- seq ( 0 , 1 , by = hap.count.interval / len.bp )#
	hap.freqs [ 1 , pos.cuts < positions [ 1 ] ] <- nrow ( these.seqs [[ 2 ]] )#
	for ( i in 1 : length ( positions ) ) {#
		#if ( i == 18 ) break#
		this.site <- which ( these.seqs [[ 2 ]] [ , i ] == 1 )#
		if ( any ( unlist ( lapply ( my.part ,  function ( x ) all ( x %in% this.site ) ) ) ) |  length ( this.site ) == 1 ) { #
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
			next#
		} else {#
			new.part <- list ()#
			for ( j in 1 : length ( my.part ) ) {#
				x <- my.part [[ j ]]#
				if ( length ( x [ x %in% this.site ] ) > 0 ) {#
					new.part [[ length ( new.part ) + 1 ]] <- x [ x %in% this.site ]#
					new.part [[ length ( new.part ) + 1 ]] <- x [ !(x %in% this.site) ]#
				} else {#
					new.part [[ length ( new.part ) + 1 ]] <- x#
				}#
			}#
			my.part <- new.part#
		}#
		#these.hap.freqs <- numeric ( length ( unlist ( my.part ) ) )#
		if ( i == length ( positions ) ) {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		} else {#
			hap.freqs [ 1 : length ( my.part ) , pos.cuts >= positions [ i ] & pos.cuts < positions [ i + 1 ] ] <- sort ( unlist ( lapply ( my.part , length ) ) , d = T )#
		}#
		if ( length ( my.part ) == nrow ( hap.freqs ) ) {#
			hap.freqs [ , pos.cuts >= positions [ i ] ] <- 1#
			break#
		}#
	}#
	return ( hap.freqs )#
}#
# get.freq.spec<-function(n,num.sims, path){#
	# recover()#
	# a<-system(paste("grep segsites ", path , "/myseqdata",sep=""),intern=TRUE)#
	# seg.sites<-sapply(a,function(b){as.numeric(strsplit(b,":")[[1]][2])})#
	# polymorph<- seg.sites>0#
	# seq.lines<-c(0,cumsum(polymorph*n)[-length(polymorph)])	#
	# freq.specs<-sapply(0:(num.sims-1),function(iter){		#
		# #recover()#
		# ######
		# # if(!polymorph[1+iter]) {freq.spec<-rep(0,n);return(freq.spec)}#
		# positions<-read.table(paste(path, "/myseqdata",sep=""),skip=5+4*iter+seq.lines[iter+1],nrow=1)#
# #		print(positions[1])#
# #		if(length(positions)==1){freq.spec<-rep(0,n);return(freq.spec)}		#
		# seqs.raw<-scan(paste(path, "/myseqdata",sep=""),skip=6+4*iter+seq.lines[iter+1],nline=n,what=character(),quiet=TRUE)#
		# seqs<-sapply(seqs.raw,function(seq){as.numeric(strsplit(seq,"")[[1]])})#
		# colnames(seqs)<-NULL#
		# seqs<-t(seqs)#
		# these.pos<-positions[-1]>0.5   ###why the -1 here? oh because positions has label#
		# if(sum(these.pos)==0){freq.spec<-rep(0,n);return(freq.spec)}#
		# seqs<-seqs[,these.pos] ##throw out first 1/2 of seq.#
		# if(sum(these.pos)==1){freq.spec<-(1:n==sum(seqs)); return(freq.spec)}#
		# mut.freq<-colSums(seqs)#
		# freq.spec<- sapply(1:n,function(i){sum(mut.freq==i)})#
		# return(freq.spec)#
	# })#
	# #freq.specs <- rowSums ( freq.specs )#
	# return(freq.specs)#
# }#
hard.runs <- SweepFromStandingSim ( N = 10000 , s = 0.05 , f = 1/20000 , reps = 200 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE  , display.rep.count = TRUE , time.factor = 1  )#
hard.sweep <- msHapSims ( hard.runs [[ 1 ]] , n.sam = 100 , f = 1/20000 , s = 0.05 , N = 10000 , path = "Sims/HapSims" , num.sims = 2 , len.bp = 2000000 , r.bp = 10^-8 , mu.bp = 10^-8 , hap.count.interval = 1000 )
matplot ( t ( hard.sweep [[ 1 ]]) , type = "l" , lty = 1 , lwd = 1.5 )
matplot ( t ( hard.sweep [[ 1 ]]) , type = "l" , lty = 1 , lwd = 1.5 )
matplot ( t ( hard.sweep [[ 1 ]]) , type = "l" , lty = 1 , lwd = 1.5 )
hard.sweep [[ 2 ]] [ 1 , ]
hard.sweep [[ 2 ]]
