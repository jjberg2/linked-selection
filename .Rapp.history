MakeVar ( 0.5 , 10000 , 0.01 , 2 )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop ) {#
	#recover()#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
}#
MakeVar ( 0.5 , 10000 , 0.01 , 2 )
ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )
hist ( ts_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )
hist ( ts_true , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
par ( mfrow = c ( 1 ,2 ))
hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )
par ( mfrow = c ( 1 ,1 ))
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_true , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
rand = T
if ( rand ) p <- runif ( n_rep )
p
new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )
p
p <- runif ( n_rep )
p
p <- runif ( n_rep )
p
n_loc = 100
p <- runif ( n_loc * n_rep )
length(p)
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_pop )
p
dim(p)
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
dim(p)
p[,1]
p[,1] * diag ( 100 )
p[,1] * (1-p[,1] )* diag ( 100 )
apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , x  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) ) )
x
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) ) )
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) )
n_loc
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) )
rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
dim(new_ps)
head(new_ps)
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- apply ( new_ps , 2 , function ( x ) sum ( x * ( 1 - x ) ) )
vars_t
colSums ( new_ps * ( 1 - new_ps ) )
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
p * ( 1 - p )
colSums ( p * ( 1 - p ) )
vars_t
vars_0 <- colSums ( p * ( 1 - p ) )
vars_0 - vars_t
Fst * vars_0
( vars_0 - vars_t ) / ( Fst * vars_0 )
vars_start <- colSums ( p * ( 1 - p ) )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , T , 100 )
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	recover()#
	if ( rand ) {#
		p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		( vars_start - vars_t ) / ( Fst * vars_start )#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
p
n_rep
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
vars_t
vars_start <- colSums ( p * ( 1 - p ) )
vars_start
( vars_start - vars_t ) / ( Fst * vars_start )
my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 50 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
dt
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 50 )
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 1000 )
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 200 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
sd ( my.stat)
curve ( dnorm ( x , 1, 0.83) , add = T , col = "red")
qqplot ( my.stat , dnorm ( x , 1, 0.83))
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 300 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
p
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
warnings()
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
vars_start <- colSums ( p * ( 1 - p ) )
vars_start
vars_t
vars_start
my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
vars_start - vars_t
hist ( vars_start - vars_t , breaks = 50 , freq = F )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
n_loc
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")#
		recover()	#
#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.5 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p=0.45
p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p <- numeric ( n_loc * n_rep )
p
tmp <- runif ( )
tmp <- runif ( 1 )
tmp
blah <- integrate( function ( x ) 1/ x  , 0 , 1 )
blah <- integrate( function ( x ) 1/ x  , 0.00001 , 1 )
blah
integrate( function ( x ) 1/ x  , 0.000001 , 1 )
integrate( function ( x ) 1/ x  , 0.0000001 , 1 )
integrate( function ( x ) 1/ x  , 0.00000001 , 1 )
1/20000
integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
tmp <- runif ( 1 )
tmp
denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
1/tmp
(1/tmp)/denom
denom
names(denom)
denom$value
(1/tmp)/denom$value
n_rep
tmp
p <- numeric ( n_loc * n_rep )
i = 1 #
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
hist ( p , breaks = 500 , freq = F)
hist ( p , breaks = 50 , freq = F)
tmp =0.0001
denom
denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
denom
1/tmp
(1/tmp)/denom$value
tmp
tmp = 0.0000001
tmp < 1/20000
p <- numeric ( n_loc * n_rep )#
		i = 1 #
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			if ( tmp < 1/20000 | tmp > ( 1 - 1/20000 ) ) next#
			denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
hist ( p , breaks = 50)
denom <- integrate( function ( x ) 1/ x  , 0.00000000000000001 , 1 )
denom
p <- numeric ( n_loc * n_rep )#
		i = 1 #
		denom <- integrate( function ( x ) 1/ x  , 0.00000000000000001 , 1 )#
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			if ( tmp < 1/20000 | tmp > ( 1 - 1/20000 ) ) next#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
run.ms.f<-function( n.sam , f , s , no.sweep , reps , N , n.loc ){#
	recover()#
	source ( "/Users/JeremyBerg/Documents/Academics/StandingSweep/Scripts/SweepFromStandingSim.R")#
	setwd("/Users/JeremyBerg/Documents/Academics/StandingSweep")#
	freqs <- SweepFromStandingSim ( N , s , f , reps , no.sweep , cond.on.loss = T , cond.on.fix = T , display.rep.count = T ) [[ 1 ]]#
	my.trajectories <- apply ( freqs , 1 , function ( x ) cbind ( 0 : ( length ( x [ x != 0 ] ) ) / ( 4*N ) , c ( rev ( x [ x != 0 ]  ) , 0 ) ) )#
	#recover()#
	ld.stats <- list ()#
	for ( i in 1 : length ( my.trajectories ) ) {#
		header.material <- c ( "1" , "1" , paste ( "n:" , nrow ( my.trajectories [[ i ]] ) ) )#
		write ( header.material , file = paste ( "Working/freq.traj." , i , sep = "" ) )#
		write.table ( my.trajectories [[  i ]] , file = paste ( "Working/freq.traj." , i , sep = "" ) , quote = F , row.names = F , col.names = F , append = T , sep = "\t" )#
		system(paste("Scripts/msseldir/mssel ",n.sam," 1 0 ",n.sam," Working/freq.traj.",i," 20 -t 100000.0 -r 2000.0 " , n.loc , " > Output/myseqdata" , i ,sep="") )#
	}#
	# for ( i in 1 : length ( my.trajectories ) ) {#
		# ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		# ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
	# }#
	# sig.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# r.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# for ( i in levels ( ld.stats [[1]][[4]]) ) {#
		# for ( j in levels ( ld.stats [[1]][[4]]) ) {#
			# site.one <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == i ) )#
			# site.two <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == j ) )#
			# temp <- mapply ( function ( x , y , z ) { D.stat.sq <- x [[ 1 ]] [ y , z ] ; denom <- x [[ 2 ]] [ y , z ]; return ( list ( D.stat.sq , denom ) ) } , x = ld.stats , y = site.one , z = site.two )#
			# sig.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) ) / mean ( unlist ( temp [ 2 , ] ) )#
			# r.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) / unlist ( temp [ 2 , ] ) )	#
		# }#
		# print ( i )#
	# }#
	# return ( list ( sig.sq , r.sq ) )#
}
run.ms.f ( n.sam = 20 , f = 0.001 , s = 0.01 , no.sweep = T , reps = 100 , N = 10000 , n.loc = 40 )
run.ms.f<-function( n.sam , f , s , no.sweep , reps , N , n.loc ){#
	#recover()#
	source ( "/Users/JeremyBerg/Documents/Academics/StandingSweep/Scripts/SweepFromStandingSim.R")#
	setwd("/Users/JeremyBerg/Documents/Academics/StandingSweep")#
	freqs <- SweepFromStandingSim ( N , s , f , reps , no.sweep , cond.on.loss = T , cond.on.fix = T , display.rep.count = T ) [[ 1 ]]#
	my.trajectories <- apply ( freqs , 1 , function ( x ) cbind ( 0 : ( length ( x [ x != 0 ] ) ) / ( 4*N ) , c ( rev ( x [ x != 0 ]  ) , 0 ) ) )#
	#recover()#
	ld.stats <- list ()#
	for ( i in 1 : length ( my.trajectories ) ) {#
		header.material <- c ( "1" , "1" , paste ( "n:" , nrow ( my.trajectories [[ i ]] ) ) )#
		write ( header.material , file = paste ( "Working/freq.traj." , i , sep = "" ) )#
		write.table ( my.trajectories [[  i ]] , file = paste ( "Working/freq.traj." , i , sep = "" ) , quote = F , row.names = F , col.names = F , append = T , sep = "\t" )#
		system(paste("Scripts/msseldir/mssel ",n.sam," 1 0 ",n.sam," Working/freq.traj.",i," 20 -t 100000.0 -r 2000.0 " , n.loc , " > Output/myseqdata" , i ,sep="") )#
	}#
	# for ( i in 1 : length ( my.trajectories ) ) {#
		# ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		# ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
	# }#
	# sig.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# r.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# for ( i in levels ( ld.stats [[1]][[4]]) ) {#
		# for ( j in levels ( ld.stats [[1]][[4]]) ) {#
			# site.one <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == i ) )#
			# site.two <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == j ) )#
			# temp <- mapply ( function ( x , y , z ) { D.stat.sq <- x [[ 1 ]] [ y , z ] ; denom <- x [[ 2 ]] [ y , z ]; return ( list ( D.stat.sq , denom ) ) } , x = ld.stats , y = site.one , z = site.two )#
			# sig.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) ) / mean ( unlist ( temp [ 2 , ] ) )#
			# r.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) / unlist ( temp [ 2 , ] ) )	#
		# }#
		# print ( i )#
	# }#
	# return ( list ( sig.sq , r.sq ) )#
}
run.ms.f ( n.sam = 20 , f = 0.001 , s = 0.01 , no.sweep = T , reps = 100 , N = 10000 , n.loc = 40 )
run.ms.f<-function( n.sam , f , s , no.sweep , reps , N , n.loc ){#
	#recover()#
	source ( "/Users/JeremyBerg/Documents/Academics/StandingSweep/Scripts/SweepFromStandingSim.R")#
	setwd("/Users/JeremyBerg/Documents/Academics/StandingSweep")#
	freqs <- SweepFromStandingSim ( N , s , f , reps , no.sweep , cond.on.loss = T , cond.on.fix = T , display.rep.count = T ) [[ 1 ]]#
	my.trajectories <- apply ( freqs , 1 , function ( x ) cbind ( 0 : ( length ( x [ x != 0 ] ) ) / ( 4*N ) , c ( rev ( x [ x != 0 ]  ) , 0 ) ) )#
	#recover()#
	ld.stats <- list ()#
	for ( i in 1 : length ( my.trajectories ) ) {#
		header.material <- c ( "1" , "1" , paste ( "n:" , nrow ( my.trajectories [[ i ]] ) ) )#
		write ( header.material , file = paste ( "Working/freq.traj." , i , sep = "" ) )#
		write.table ( my.trajectories [[  i ]] , file = paste ( "Working/freq.traj." , i , sep = "" ) , quote = F , row.names = F , col.names = F , append = T , sep = "\t" )#
		system(paste("Scripts/msseldir/mssel ",n.sam," 1 0 ",n.sam," Working/freq.traj.",i," 20 -t 10000.0 -r 2000.0 " , n.loc , " > Output/myseqdata" , i ,sep="") )#
	}#
	# for ( i in 1 : length ( my.trajectories ) ) {#
		# ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		# ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
	# }#
	# sig.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# r.sq <- matrix ( NA , nrow = n.loc , ncol = n.loc )#
	# for ( i in levels ( ld.stats [[1]][[4]]) ) {#
		# for ( j in levels ( ld.stats [[1]][[4]]) ) {#
			# site.one <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == i ) )#
			# site.two <- lapply ( ld.stats , function ( x ) which ( x [[ 4 ]] == j ) )#
			# temp <- mapply ( function ( x , y , z ) { D.stat.sq <- x [[ 1 ]] [ y , z ] ; denom <- x [[ 2 ]] [ y , z ]; return ( list ( D.stat.sq , denom ) ) } , x = ld.stats , y = site.one , z = site.two )#
			# sig.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) ) / mean ( unlist ( temp [ 2 , ] ) )#
			# r.sq [ which ( levels ( ld.stats [[1]][[4]]) == i ) , which ( levels ( ld.stats [[1]][[4]]) == j ) ] <- mean ( unlist ( temp [ 1 , ] ) / unlist ( temp [ 2 , ] ) )	#
		# }#
		# print ( i )#
	# }#
	# return ( list ( sig.sq , r.sq ) )#
}
run.ms.f ( n.sam = 20 , f = 0.001 , s = 0.01 , no.sweep = T , reps = 100 , N = 10000 , n.loc = 40 )
run.ms.f ( n.sam = 20 , f = 0.001 , s = 0.01 , no.sweep = T , reps = 100 , N = 10000 , n.loc = 40 )
for ( i in 1 : length ( my.trajectories ) ) {#
		ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
	}
for ( i in 1 : 100 ) {#
		ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
}
LDSimCalc <- function ( file.name ) {#
	#recover()#
	my.con <- file ( file.name )#
	open ( my.con )#
	my.lines <- readLines ( my.con )#
	close ( my.con )#
	pos.line.id <- grep ( "pos" , my.lines )#
	pos.line <- my.lines [ pos.line.id ]#
	positions <- as.numeric ( strsplit ( pos.line , " ")[[ 1 ]] [ -1 ] )#
	geno.lines <- my.lines [ ( pos.line.id + 1 ) : length ( my.lines ) ]#
	split.geno.lines <-  lapply ( strsplit ( geno.lines , "" ) , as.numeric )#
	geno.mat <- do.call ( rbind , split.geno.lines )#
	D.stat.sq <- cov ( geno.mat )^2#
	freqs <- colMeans ( geno.mat )#
	rt.vars <- sqrt ( freqs * ( 1 - freqs ) )#
	var.prod.mat <- rt.vars %o% rt.vars#
	return ( list ( D.stat.sq , var.prod.mat , positions ) )#
}
for ( i in 1 : 100 ) {#
		ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
}
ld.stats = list()
for ( i in 1 : 100 ) {#
		ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
}
n.loc=40
for ( i in 1 : 100 ) {#
		ld.stats [[ i ]] <- LDSimCalc ( paste ( "Output/myseqdata" , i , sep = "" ) )#
		ld.stats [[ i ]] [[ 4 ]] <- cut ( ld.stats [[ i ]] [[ 3 ]] , 0:n.loc/n.loc , include.lowest = T )#
}
ld.stats
length(ld.stats[[1]])
dim(length(ld.stats[[1]][[1]]))
dim(ld.stats[[1]][[1]])
dim(ld.stats[[1]][[2]])
dim(ld.stats[[1]][[3]])
dim(ld.stats[[1]][[4]])
dim(ld.stats[[1]][[3]])
ld.stats[[1]][[3]]
ld.stats[[1]][[4]]
