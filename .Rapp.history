axis ( 1 , seq ( 0 , tail ( intervals , 1 ) , by = 1000 ) , seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )  )
axis ( 1 , seq ( 0 , tail ( intervals/1000 , 1 ) , by = 1000 ) , seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )  )
ewens.dist.matrix
10e6
10e6/100000
10e6/interval.width
seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )
axis ( 1 , seq ( 1 , ncol ( ewens.dist.matrix ) , by = 10e6/interval.width ) , seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )  )
seq ( 1 , ncol ( ewens.dist.matrix ) , by = 10e6/interval.width )
10e6/interval.width
seq ( 1 , ncol ( ewens.dist.matrix ) , by = 10e5/interval.width )
axis ( 1 , seq ( 1 , ncol ( ewens.dist.matrix ) , by = 10e5/interval.width ) , seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )  )
matplot ( #
		t ( ewens.dist.matrix ) , #
		type = "n" , #
		lty = 1 , #
		lwd = 0.7 , #
		col = "black" , #
		ylab = "Cumulative Probability" , #
		xlab = "kb" , #
		#main = paste ( n.tips , "Lineages in a Sweep from f =" , f , "at s =" , s , "," , reps , "Reps" ) , #
		bty = "n" ,#
		ylim = c ( 0 , 1 ) , #
		xaxt = "n"#
	)#
	axis ( 1 , seq ( 1 , ncol ( ewens.dist.matrix ) , by = 10e5/interval.width ) , seq ( 0 , tail ( intervals , 1 ) / 1000 , by = 1000 )  )
col.vect <- rainbow ( n.tips , s = 0.8  , v = 1 , start = 1/40 , end = 4/6  )#
	#legend("topright", legend=paste("j=",1:n.tips), lty=1,col= col.vect,lwd=2)#
	for ( i in  ( nrow ( cum.probs ) - 1 ):1 ) {#
			#i = i + 1#
			X.ax <- 1:ncol ( cum.probs ) #which ( cum.probs [ i , ] != cum.probs [ i + 1 , ] )#
	if(plot.cumulative){	Y.ax1 <- cum.probs [ i , X.ax ]}#
	if(!plot.cumulative){ Y.ax1 <- rep(0,ncol ( cum.probs ) )	}#
			if(!plot.cumulative){ #
				lines(X.ax,cum.probs [ i + 1 , X.ax ], col = col.vect [ i ],lwd=2 )#
				lines (ewens.cum.probs[i,], col = col.vect [ i ],lwd=2,lty=2 ) #
				}#
			Y.ax2 <- cum.probs [ i + 1 , X.ax ]#
			if(plot.cumulative) polygon ( x = c ( X.ax , rev ( X.ax ) ) , y = c ( Y.ax1 , rev ( Y.ax2 ) ) , lty = 0 , col = col.vect [ i ] )					#
	}
if(plot.cumulative){ #
		ewens.cum.probs <- ewens.cum.probs [ - nrow ( ewens.cum.probs ) , ]#
		apply ( ewens.cum.probs , 1 , function ( x ) lines ( x , lty = 1 , lwd = 0.8 ) )#
	}
Q
>>>>>>> ee36faaf11c8e4cf6c6ceb1f7cb958b3bb08e5a0
real.fs <- c ( 1 / 20000 , 0.001 , 0.01 , 0.05 , 0.1 )
real.fs
real.fs <- c ( 1 / 20000 , 0.001 , 0.01 , 0.05 , 0.1 )
my.runs <- lapply ( real.fs , function ( x ) SweepFromStandingSim ( N = 10000 , s = 0.05 , f = x , reps = 1000 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE , time.factor = 1 , display.rep.count = T ) )#
many.sim.freqs <- list ( my.runs , real.fs )#
save ( many.sim.freqs  ,  file = "~/Documents/Academics/StandingSweeps/Sims/freqs.traj.s05.Rdata"  )#
for ( i in 1 : length ( real.fs ) ) {#
	run.ms.f ( runs = my.runs [[ i ]] [[ 1 ]] , n.sam = 2 , f = real.fs [ i ] , s = 0.05 , N = 10000 , path = "~/Documents/Academics/StandingSweeps/" )#
}
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source ( "~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R")
source('~/Documents/Academics/CoopLab/Projects/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source ( "~/Documents/Academics/CoopLab/Projects/StandingSweeps/Scripts/run.ms.functions.R")#
#source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
#source ( "~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R")#
real.fs <- c ( 1 / 20000 , 0.001 , 0.01 , 0.05 , 0.1 )#
my.runs <- lapply ( real.fs , function ( x ) SweepFromStandingSim ( N = 10000 , s = 0.05 , f = x , reps = 1000 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE , time.factor = 1 , display.rep.count = T ) )#
many.sim.freqs <- list ( my.runs , real.fs )#
save ( many.sim.freqs  ,  file = "~/Documents/Academics/StandingSweeps/Sims/freqs.traj.s05.Rdata"  )#
for ( i in 1 : length ( real.fs ) ) {#
	run.ms.f ( runs = my.runs [[ i ]] [[ 1 ]] , n.sam = 2 , f = real.fs [ i ] , s = 0.05 , N = 10000 , path = "~/Documents/Academics/StandingSweeps/" )#
}
source('~/Documents/Academics/CoopLab/Projects/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source ( "~/Documents/Academics/CoopLab/Projects/StandingSweeps/Scripts/run.ms.functions.R")
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)
library ( randtoolbox)
library ( "randtoolbox")
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f){#
	recover()#
	#my.StirlingNumbers<-StirlingNumbers(n) #
	ESF.prob.k<-EwensDist( n=nsam , N =N, r=r , distance=1 , f=f) # ,stirling.numbers=my.StirlingNumbers)    ### is of form [n,k]#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f) # ,stirling.numbers=my.StirlingNumbers)    ### is of form [n,k]#
	my.StirlingNumbers<-StirlingNumbers(nsam)    ##Usigned Stirling numbers of 1st kind. ma#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam , nsam , nsam , nsam ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {		#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	terms.in.sum <- array ( 0 , dim = c ( nsam , nsam , nsam , nsam ) )#
	H <- array ( 0 , dim = c ( nsam , nsam , nsam , nsam ) )#
	jg.tracker <- array ( NA , dim = c ( nsam , nsam , nsam , nsam , nsam ) )#
	kg.tracker <- array ( NA , dim = c ( nsam , nsam , nsam , nsam , nsam ) ) #
	for(l in 1:(nsam-1)){	#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {	#
			for(k in 1 : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for(j in 1:(k + nsam - i  - 1 )){#
					for ( g in max ( 0 , ( j - k ) ) : min ( l , nsam - i , j ) ) {#
						if ( FALSE ) {#
						if ( k == 1 ) {#
							if ( nsam - i == l ) 					p_l_given_k [ k , j , l ] <- 1#
							if ( l - g  == 0 & j - g == 0 ) 	p_l_given_k [ k , j , l ] <- 1#
						} else if ( k > 1) {#
						#	if ( k - ( j - g ) < 0 ) next#
							if ( nsam - i - ( l - g ) < 0 ) next#
							stirling.bit <- my.StirlingNumbers[ l - g , j - g ] * my.StirlingNumbers[nsam - i - ( l - g ) , k - ( j - g ) ]  / my.StirlingNumbers[ nsam - i ,k - g ]#
							p_l_given_k [ g , j , k , l ] <- stirling.bit * choose ( nsam - i , l - g ) / choose ( k - g , j - g )#
						}#
						#if(!is.finite(p_l_given_k [ l , k , j ])){ stop ("is infinite") }  ##cat("problem",l,k,j," "); ##is this right?#
						H [ g , j , k , nsam - i ] <- choose ( j , g ) / choose ( k + nsam - i , j )#
						terms.given.j [ j , k ] <- p_l_given_k [ k , j , l ]*freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
					#	terms.in.sum[k]<-terms.in.sum[k]+ESF.prob.k[nsam,k] *p_l_given_k [ l , k , j ]*freq.specs[k,j]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]			#
						stopifnot( H <= 1 , H >= 0 )#
						}#
						jg.tracker [ k , j , g , i ,  l ]	 <- j - g#
						kg.tracker [ k , j , g , i , l ]	 <- k - ( j - g )#
					}#
				}		#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	return(terms.in.sum)#
}#
#
expected.freq.times.standing.w.sweep ( nsam = 10 , N = 10000 , r = 0.5 , f = 0.05 )
setwd ( "~/Documents/Academics/StandingSweeps/" )#
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/freq_spectrum_standing_sweep_coal.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R', chdir = TRUE)#
options ( scipen = 400)#
my.N <- 10000#
my.rs <- c ( 0 , 0.0000001 , 0.00001 , 0.00001 , 0.001 , 0.004 , 0.008 , 0.012 , 0.016 , 0.02 ) #c ( 0.0001 , 0.001 , 0.01 , 0.05 , 0.1 , 0.5 ) #
#my.fs <- c ( 0.001 , 0.01 , 0.025 , 0.05 , 0.075 , 0.1 )#
my.fs <- c ( 0.001 , 0.05 , 0.1 )#
s <- 0.05
withsweep.freq.spec.list <- list ()#
for ( i in 1:8 ) {withsweep.freq.spec.list [[ i ]] <- list()}
f = 0.001
r = 0
my.runs <-  SweepFromStandingSim ( N = 10000 , s = s , f = f , reps = 1000 , no.sweep = FALSE , cond.on.loss = TRUE , cond.on.fix = TRUE , time.factor = 1 , display.rep.count = T )
sim.freq.spec <- run.ms.f ( runs = my.runs [[ 1 ]] , f = f , s = 0.05 , n.sam = 12 , N = my.N , path = "" , ext = "fr.spec", get.site.density = FALSE , recom = 4*my.N*r )#
		my.test <- matrix ( f , nrow = 1000 , ncol = 1000 )#
		sim.freq.spec.const <- run.ms.f ( runs = my.test , f = f , s = 0.05 , n.sam = 12 , N = my.N , path = "" , ext = "fr.spec", get.site.density = FALSE , recom = 4*my.N*r )#
		if ( r != 0 ) {#
			approx.freq.spec <- expected.freq.times.standing(nsam=12,N=my.N,r = r , f = f )#
		} else {#
			approx.freq.spec <- array ( 0 , dim = c ( 12 , 12 , 12 ) )#
		}#
		withsweep.freq.spec.list [[ 1 ]] [[ i ]] <- r#
		withsweep.freq.spec.list [[ 2 ]] [[ i ]] <- f#
		withsweep.freq.spec.list [[ 3 ]] [[ i ]] <- sim.freq.spec#
		withsweep.freq.spec.list [[ 4 ]] [[ i ]] <- sim.freq.spec.const#
		withsweep.freq.spec.list [[ 5 ]] [[ i ]] <- approx.freq.spec#
		withsweep.freq.spec.list [[ 6 ]] [[ i ]] <- rowSums ( withsweep.freq.spec.list [[ 3 ]] [[ i ]] ) / sum ( withsweep.freq.spec.list [[ 3 ]] [[ i ]] )#
		withsweep.freq.spec.list [[ 7 ]] [[ i ]] <- rowSums ( withsweep.freq.spec.list [[ 4 ]] [[ i ]] ) / sum ( withsweep.freq.spec.list [[ 4 ]] [[ i ]] )#
		withsweep.freq.spec.list [[ 8 ]] [[ i ]] <- apply ( withsweep.freq.spec.list [[ 5 ]] [[ i ]]  , 3 , sum )#
		save ( withsweep.freq.spec.list , file = "Sims/withsweep.freq.spec.list.Rdata" )
withsweep.freq.spec
withsweep.freq.spec.list[[6]]
withsweep.freq.spec.list [[ 1 ]]
i
rm ( i)
setwd ( "~/Documents/Academics/StandingSweeps/" )#
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/freq_spectrum_standing_sweep_coal.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R', chdir = TRUE)#
options ( scipen = 400)
i
load("/Users/JeremyBerg/Documents/Academics/StandingSweeps/Sims/nosweep.freq.spec.list.Rdata")
nosweep.freq.spec.list[[6]]
nosweep.freq.spec.list[[2]]
unlist ( nosweep.freq.spec.list[[2]] )
unlist ( nosweep.freq.spec.list[[2]] ) == 0.05
these.f <- unlist ( nosweep.freq.spec.list[[2]] ) == 0.05
nosweep.freq.spec.list [[ 3 ]]
these.f <- unlist ( nosweep.freq.spec.list[[2]] ) == 0.05
these.f
nosweep.freq.spec.list [[ 6 ]]
nosweep.freq.spec.list [[ 6 ]] [[ these.f ]]
these.f
do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] )
do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] ) [ these.f , ]
these.f
these.f
which ( these.f)
nosweep.freq.spec.list [[ 1 ]] [[ these.f ]]
nosweep.freq.spec.list [[ 1 ]]
unlist ( nosweep.freq.spec.list [[ 1 ]] )
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ]
do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] )
nosweep.freq.spec.list[[2]]
these.f <- unlist ( nosweep.freq.spec.list[[2]] ) == 0.025
these.f
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ]
do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] ) [ these.f , ]
do.call ( rbind , nosweep.freq.spec.list [[ 7 ]] ) [ these.f , ]
do.call ( rbind , nosweep.freq.spec.list [[ 8 ]] ) [ these.f , ]
(1/1:11)/(sum ( 1/(1:11)))
do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] ) [ these.f , ]
exact.sim.freq.spec <- do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] ) [ these.f , ]
approx.sim.freq.spec <- do.call ( rbind , nosweep.freq.spec.list [[ 8 ]] ) [ these.f , ]
approx.sim.freq.spec
i <- 1
exact.sim.freq.spec [ i , ]
barplot ( exact.sim.freq.spec [ i , ] )
approx.sim.freq.spec [ i , ]
table ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
approx.sim.freq.spec [ i , ]
blah <- table ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  )
i <- 2
blah <- table ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
blah
barplot ( blah  )
barplot ( blah  , beside = T )
exact.sim.freq.spec [ i , ]
exact.sim.freq.spec [ i , ]
approx.sim.freq.spec [ i , ]
blah
blah <- cbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
blah
barplot ( blah  , beside = T )
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T )
i <- 1
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
blah
barplot ( blah  , beside = T )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) )
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) )
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) )
i <- 3
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) )
i <- 5
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
i <- 1
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
i <- 2
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
exact.sim.freq.spec
getwd()
f <- 0.025
these.f <- unlist ( nosweep.freq.spec.list[[2]] ) == f
f
split ( f , "." )
split ( f , "\." )
split ( f , "/." )
split ( as.character ( f ) , "/." )
split ( as.character ( f ) , "." )
split ( as.character ( f ) , "\." )
nosweep.freq.spec.list [[ 2 ]]
unlist ( nosweep.freq.spec.list [[ 2 ]] 0
unlist ( nosweep.freq.spec.list [[ 2 ]] )
unlist ( nosweep.freq.spec.list [[ 2 ]] ) [ these.f ]
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ]
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ]
i
i=1
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ]
paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , sep = "" )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
for ( i in 1 : ncol ( exact.sim.freq.spec ) ) {#
	blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )#
	pdf ( paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , ".nosweep.pdf" , sep = "" ) )#
	barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	dev.off()#
}
io
i
ncol ( exact.sim.freq.spec )
exact.sim.freq.spec
for ( i in 1 : nrow ( exact.sim.freq.spec ) ) {#
	blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )#
	pdf ( paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , ".nosweep.pdf" , sep = "" ) )#
	barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	dev.off()#
}
load("/Users/JeremyBerg/Documents/Academics/StandingSweeps/Sims/withsweep.freq.spec.list.Rdata")
f <- 0.025
unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ]
exact.sim.freq.spec <- do.call ( rbind , nosweep.freq.spec.list [[ 6 ]] ) [ these.f , ]
exact.sim.freq.spec
flat.sim.freq.spec <- do.call ( rbind , nosweep.freq.spec.list [[ 7 ]] ) [ these.f , ]
flat.sim.freq.spec
approx.sim.freq.spec <- do.call ( rbind , nosweep.freq.spec.list [[ 8 ]] ) [ these.f , ]
approx.sim.freq.spec
paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , "s" , 0.05 , ".pdf" , sep = "" )
i
for ( i in 1 : nrow ( exact.sim.freq.spec ) ) {#
	blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )#
	pdf ( paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , "s" , 0.05 , ".pdf" , sep = "" ) )#
	barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	dev.off()#
}
EwensDist <- function ( n , N , r , distance , f ) {#
	#recover()	#
	param <- 4 * N * r * distance * f * ( 1- f )#
	denom  <- cumprod ( param + 0 : ( n - 1 ) )#
	stirling.numbers <- StirlingNumbers ( n )#
	ewens.dist <- t ( param^(1:n) * t ( stirling.numbers / denom ) )#
	return ( ewens.dist ) #
#
}
StirlingNumbers <- function ( n ) {#
	library ( randtoolbox )#
	second.kind <- lapply ( 1 : n , stirling )#
	second.kind.matrix <- matrix ( nrow = n , ncol = n )#
	for ( i in 1 : n ) {#
		if ( i < n ) {#
			second.kind.matrix [ i , ] <- c ( second.kind [[ i ]] [ -1 ], rep ( 0 , n - length ( second.kind [[ i ]] ) + 1 ) )#
		} else if ( i == n ) {#
			second.kind.matrix [ i , ] <- second.kind [[ i ]] [ -1 ]#
		}#
	}#
	#recover()#
	first.kind.matrix <- abs ( solve ( second.kind.matrix ) )#
	first.kind.matrix [ first.kind.matrix < 0.99 ] <- 0#
	return ( first.kind.matrix )#
}
factorial ( 500 )
i=1
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
axis ( 1 , 1:11)
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
axis ( 1 , 1 + seq ( 1 , 20 , 3 ) )
axis ( 1 , 1 + seq ( 1 , 30 , 3 ) )
axis ( 1 , 1 + seq ( 1 , 31 , 3 ) )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
axis ( 1 , 1 + seq ( 1 , 31 , 3 ) , labels = 1:11 )
blah <- rbind ( exact.sim.freq.spec [ i , ] , approx.sim.freq.spec [ i , ] )
blah
blah <- rbind ( exact.sim.freq.spec [ i , -ncol ( exact.sim.freq.spec ) ] , approx.sim.freq.spec [ i , -ncol ( exact.sim.freq.spec ) ] )
blah
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
axis ( 1 , 1 + seq ( 1 , 31 , 3 ) , labels = 1:11 )
mtext ( "Frequency" , side = 2 )
mtext ( "Frequency" , side = 2 , line = 2 )
mtext ( "Frequency" , side = 2 , line = 2 , cex = 2 )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
mtext ( "Frequency" , side = 2 , line = 2 , cex = 1.5 )
mtext ( "Frequency" , side = 1 , line = 2 , cex = 1.5 )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )
mtext ( "Frequency" , side = 1 , line = 2 , cex = 1.5 )
mtext ( "Frequency" , side = 2 , line = 2 , cex = 1.5 )
mtext ( "Counts" , side = 1 , line = 2 , cex = 1.5 )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	mtext ( "Counts" , side = 1 , line = 2 , cex = 1.5 )#
	mtext ( "Frequency" , side = 2 , line = 2 , cex = 1.5 )#
	axis ( 1 , 1 + seq ( 1 , 31 , 3 ) , labels = 1:11 )
barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	#mtext ( "Counts" , side = 1 , line = 2 , cex = 1.5 )#
	#mtext ( "Frequency" , side = 2 , line = 2 , cex = 1.5 )#
	axis ( 1 , 1 + seq ( 1 , 31 , 3 ) , labels = 1:11 )
for ( i in 1 : nrow ( exact.sim.freq.spec ) ) {#
	blah <- rbind ( exact.sim.freq.spec [ i , -ncol ( exact.sim.freq.spec ) ] , approx.sim.freq.spec [ i , -ncol ( exact.sim.freq.spec ) ] )#
	pdf ( paste ( "Figures/FreqSpec/my.spec.f" , f , ".r" , unlist ( nosweep.freq.spec.list [[ 1 ]] ) [ these.f ] [ i ] , "s" , 0.05 , ".pdf" , sep = "" ) )#
	barplot ( blah  , beside = T , col = c ( "red" , "blue" ) , ylim = c ( 0 , 0.4 ) )#
	#mtext ( "Counts" , side = 1 , line = 2 , cex = 1.5 )#
	#mtext ( "Frequency" , side = 2 , line = 2 , cex = 1.5 )#
	axis ( 1 , 1 + seq ( 1 , 31 , 3 ) , labels = 1:11 )#
	dev.off()#
}
temp <- StructuredCoalescentSweep ( N = 10000 , s = 0.05 , f = 0.025 , reps = 1000 , n.tips = 12 , r = 10^-8 , sim.distance = 0.02 , interval.width = 1000 , no.sweep = FALSE , constant.freq = FALSE , cond.on.loss = TRUE , build.seq = TRUE , display.rep.count = TRUE ,  time.factor = 1 )
names ( temp)
names ( temp$trees)
length ( temp$trees)
length ( temp$trees[[1]])
names ( temp$trees[[1]])
lenght(temp$hap.dist)
length(temp$hap.dist)
temp$hap.dist
temp$hap.dist[[1]]
temp$standing.hap.dist
length(temp$standing.hap.dist)
temp$standing.hap.dist[[1]]
matplot ( temp$standing.hap.dist[[1]] , type = "l")
matplot ( t ( temp$standing.hap.dist[[1]] ) , type = "l")
sum ( 1 / (1:10))
2*sum ( 1 / (1:10))
2*sum ( 1 / (1:100))
2*sum ( 1 / (1:1000))
2*sum ( 1 / (1:10000))
2*sum ( 1 / (1:100000))
1 / (1:10000)
t ( temp$standing.hap.dist[[1]] )
colSums ( t ( temp$standing.hap.dist[[1]] ) )
t ( temp$standing.hap.dist[[1]] ) [ ,1:5]
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 )
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance")
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance (cM)" , xaxt = "n")
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0.5 , 1 , 1.5 , 2 ) )
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0 , 0.5 , 1 , 1.5 , 2 ) )
legend ( x = 1500 , y = 0.5 , legend = c ( 0 ,1 ,2,3,4,5) , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")
legend ( x = 1500 , y = 0.5 , legend = c ( "1 hap" ,"2 haps" , "3 haps","4 haps","5 haps") , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance (cM)" , xaxt = "n")#
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0 , 0.5 , 1 , 1.5 , 2 ) )#
legend ( x = 1500 , y = 0.5 , legend = c ( "1 hap" ,"2 haps" , "3 haps","4 haps","5 haps") , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance (cM)" , xaxt = "n")#
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0 , 0.5 , 1 , 1.5 , 2 ) )#
legend ( x = 1500 , y = 0.5 , legend = c ( "0 haps" , "1 hap" , "2 haps" , "3 haps" , "4 haps" ) , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")
mtext ( "N = 10000, s = 0.05, f = 0.025" , side = 3 , line = 2 )
mtext ( "N = 10000, s = 0.05, f = 0.025" , side = 3 , line = 2 , cex = 2 )
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance (cM)" , xaxt = "n")#
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0 , 0.5 , 1 , 1.5 , 2 ) )#
legend ( x = 1500 , y = 0.5 , legend = c ( "0 haps" , "1 hap" , "2 haps" , "3 haps" , "4 haps" ) , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")#
mtext ( "N = 10000, s = 0.05, f = 0.025" , side = 3 , line = 2 , cex = 2 )
matplot ( t ( temp$standing.hap.dist[[1]] ) [ ,1:5] , type = "l" , lty = 1 , lwd = 2 , bty = "n" , ylab = "Probability" , xlab = "Genetic Distance (cM)" , xaxt = "n")#
axis ( 1 , c ( 0,500,1000,1500,2000) , labels = c ( 0 , 0.5 , 1 , 1.5 , 2 ) )#
legend ( x = 1500 , y = 0.5 , legend = c ( "0 haps" , "1 hap" , "2 haps" , "3 haps" , "4 haps" ) , lty = 1 , lwd = 2 , col = 1:5 , bty = "n")#
mtext ( "N = 10000, s = 0.05, f = 0.025" , side = 3 , line = 1 , cex = 2 )
EwensDist
temp$standing.hap.dist[[1]]
1/2000
1/2000*0.02
seq ( 1/2000 , 1 , by = 1/2000)*0.02
0.02/(10^{-8})
seq ( 1 , 0.02/(10^{-8}) , by = 1)
max ( seq ( 1 , 0.02/(10^{-8}) , by = 1) )
max ( seq ( 1 , 0.02/(10^{-8}) , by = 1) )*10^-8
blah <- sapply ( seq ( 1 , 0.02/(10^{-8}) , by = 1) , function ( x )  EwensDist ( 12 , 10000 , 10^-8 , x , 0.025 )
)
StirlingNumbers <- function ( n ) {#
	library ( randtoolbox )#
	second.kind <- lapply ( 1 : n , stirling )#
	second.kind.matrix <- matrix ( nrow = n , ncol = n )#
	for ( i in 1 : n ) {#
		if ( i < n ) {#
			second.kind.matrix [ i , ] <- c ( second.kind [[ i ]] [ -1 ], rep ( 0 , n - length ( second.kind [[ i ]] ) + 1 ) )#
		} else if ( i == n ) {#
			second.kind.matrix [ i , ] <- second.kind [[ i ]] [ -1 ]#
		}#
	}#
	#recover()#
	first.kind.matrix <- abs ( solve ( second.kind.matrix ) )#
	first.kind.matrix [ first.kind.matrix < 0.99 ] <- 0#
	return ( first.kind.matrix )#
}#
#
stirling.numbers <- StirlingNumbers ( n )
StirlingNumbers <- function ( n ) {#
	library ( randtoolbox )#
	second.kind <- lapply ( 1 : n , stirling )#
	second.kind.matrix <- matrix ( nrow = n , ncol = n )#
	for ( i in 1 : n ) {#
		if ( i < n ) {#
			second.kind.matrix [ i , ] <- c ( second.kind [[ i ]] [ -1 ], rep ( 0 , n - length ( second.kind [[ i ]] ) + 1 ) )#
		} else if ( i == n ) {#
			second.kind.matrix [ i , ] <- second.kind [[ i ]] [ -1 ]#
		}#
	}#
	#recover()#
	first.kind.matrix <- abs ( solve ( second.kind.matrix ) )#
	first.kind.matrix [ first.kind.matrix < 0.99 ] <- 0#
	return ( first.kind.matrix )#
}#
#
stirling.numbers <- StirlingNumbers ( 12 )
SmartEwensDist <- function ( n , N , r , distance , f ) {#
	#recover()	#
	param <- 4 * N * r * distance * f * ( 1- f )#
	denom  <- cumprod ( param + 0 : ( n - 1 ) )#
	stirling.numbers <- StirlingNumbers ( n )#
	ewens.dist <- t ( param^(1:n) * t ( stirling.numbers / denom ) )#
	return ( ewens.dist ) #
#
}
blah <- sapply ( seq ( 1 , 0.02/(10^{-8}) , by = 1) , function ( x )  SmartEwensDist ( 12 , 10000 , 10^-8 , x , 0.025 ) )
sum ( 1 / ( 1 : 11 ) )
sum ( 1 / ( 1 : 11 ) ) * 10^-8 * 0.975
1/(sum ( 1 / ( 1 : 11 ) ) * 10^-8 * 0.975)
1/(sum ( 1 / ( 1 : 11 ) )  * 0.975)
1/(sum ( 1 / ( 1 : 11 ) )  * 10000*0.975)
