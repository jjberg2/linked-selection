sardinian.freqs
flip.these <- height.effects$EFF < 0
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ
french.freqs
sardinian.freqs
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]#
## flip all to positive#
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ
height.effects
french.freqs
french.freqs
sardinian.freqs
replicate(1,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
}
)
genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})
dim(genos)
num.height.alleles<-rowSums(genos)
hist(num.height.alleles)
num.height.alleles<-colSums(genos)
hist(num.height.alleles)
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
num.height.alleles<-colSums(french.genos)#
hist(num.height.alleles)
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles<-colSums(sardinian.genos)#
hist(sardinian.num.height.alleles)
sardinian.genos
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) )
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)#
hist(french.num.height.alleles)
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) )
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T )
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles<-colSums(sardinian.genos)
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) )#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T )
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles<-colSums(sardinian.genos)
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) )#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T )
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]
sardinian.freqs
order ( french.freqs$FRQ)
french.freqs [ order ( french.freqs$FRQ) , ]
french.freqs [ order ( french.freqs$SNP) , ]
french.freqs <- french.freqs [ order ( french.freqs$SNP) , ]
sardinian.freqs <- sardinian.freqs [ order ( sardinian.freqs$SNP) , ]
sardinian.freqs
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]
sardinian.freqs <- sardinian.freqs [ order ( sardinian.freqs$SNP) , ]
height.effects
sardinian.freqs
nrow ( sardinian.freqs )
cbind ( sardinian.freqs$A1 , height.effects$A1)
cbind ( as.character ( sardinian.freqs$A1 ) , as.character ( height.effects$A1 ) )
height.effects
french.mean.height
french.freqs$FRQ
french.freqs
height.effects
french.freqs$FRQ * height.effects$EFF
french.mean.height <- sum ( french.freqs$FRQ * height.effects$EFF )
french.mean.height
sardinian.mean.height <- sum ( sardinian.freqs$FRQ * height.effects$EFF )
sardinian.mean.height
sardinian.mean.height
flip.these <- height.effects$EFF < 0
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ
sum ( french.freqs$FRQ )
sum ( sardinian.freqs$FRQ )
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})
french.genos
colSums(french.genos)
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})
colSums(sardinian.genos)
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) )
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 )
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
mean ( colSums(sardinian.genos) )
mean ( colSums(french.genos) )
french.genos
french.genos * height.effects$EFF
french.genos
t ( t ( french.genos ) * height.effects$EFF )
french.genos * height.effects$EFF
height.effects$EFF
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]#
#
french.freqs <- french.freqs [ order ( french.freqs$SNP) , ] #
sardinian.freqs <- sardinian.freqs [ order ( sardinian.freqs$SNP) , ] #
#
french.mean.height <- sum ( french.freqs$FRQ * height.effects$EFF )#
sardinian.mean.height <- sum ( sardinian.freqs$FRQ * height.effects$EFF )#
## flip all to positive#
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ#
height.effects$EFF <- abs ( height.effects$EFF )
height.effects$EFF
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)
french.genos * height.effects$EFF
colSums ( french.genos * height.effects$EFF )
french.heights <- colSums ( french.genos * height.effects$EFF )
french.heights
plot ( french.heights , french.num.height.alleles , pch = 20 )
sardinian.heights <- colSums ( sardinian.genos * height.effects$EFF )
sardinian.heights
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 )
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles <- colSums ( sardinian.genos )#
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 )#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
#
sardinian.heights <- colSums ( sardinian.genos * height.effects$EFF )#
#
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 )
points ( french.heights , french.num.height.alleles , pch = 20 , col = "red" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 )#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]#
#
french.freqs <- french.freqs [ order ( french.freqs$SNP) , ] #
sardinian.freqs <- sardinian.freqs [ order ( sardinian.freqs$SNP) , ] #
#
french.mean.height <- sum ( french.freqs$FRQ * height.effects$EFF )#
sardinian.mean.height <- sum ( sardinian.freqs$FRQ * height.effects$EFF )
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ#
height.effects$EFF <- abs ( height.effects$EFF )
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)#
#
french.heights <- colSums ( french.genos * height.effects$EFF )#
#
hist(french.num.height.alleles)#
plot ( french.heights , french.num.height.alleles , pch = 20 )
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles <- colSums ( sardinian.genos )#
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 )#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) )
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ))
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 22 , col = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) )  )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 22 , col = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 22 , col = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 22 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 22 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 16 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 16 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , fill = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 0 , 0 , 1 , 0.4 ) , rgb ( 1 , 0 , 0 , 0.4 ) ) , bty = "n" , cex = 1.5 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles"  , main = "")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5 )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 )
sardinian.heights <- colSums ( sardinian.genos * height.effects$EFF )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 )
points ( french.heights , french.num.height.alleles , pch = 20 , col = "red" )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) )
points ( french.heights , french.num.height.alleles , pch = 20 , col = rgb ( 1 , 0 , 0 , 0.4 ) )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles")
points ( french.heights , french.num.height.alleles , pch = 20 , col = rgb ( 1 , 0 , 0 , 0.4 ) )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles" , bty = "n")
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles" , bty = "n" , xlim = c ( 4.7 , 7 ) )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles" , bty = "n" , xlim = c ( 4.8 , 7 ) )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles" , bty = "n" , xlim = c ( 4.9 , 7 ) )
points ( french.heights , french.num.height.alleles , pch = 20 , col = rgb ( 1 , 0 , 0 , 0.4 ) )
legend ( "bottomright" , legend = c ( "N Europe" , "S Europe" ) , pch = 20 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5)
setwd("~/Documents/Academics/EnvironmentalCorrelations")#
height.freqs <- read.table ( "Trait_Data/europe.height.freqs.data" , h = T )#
height.effects <- read.table ( "Trait_Data/europe.height.163" , h = T )#
#
french.freqs <- height.freqs [ height.freqs$CLST == "French" , ]#
sardinian.freqs <- height.freqs [ height.freqs$CLST == "Sardinian" , ]#
#
french.freqs <- french.freqs [ order ( french.freqs$SNP) , ] #
sardinian.freqs <- sardinian.freqs [ order ( sardinian.freqs$SNP) , ] #
#
french.mean.height <- sum ( french.freqs$FRQ * height.effects$EFF )#
sardinian.mean.height <- sum ( sardinian.freqs$FRQ * height.effects$EFF )#
## flip all to positive#
flip.these <- height.effects$EFF < 0#
#
french.freqs [ flip.these , ]$FRQ <- 1 - french.freqs [ flip.these , ]$FRQ#
sardinian.freqs [ flip.these , ]$FRQ <- 1 - sardinian.freqs [ flip.these , ]$FRQ#
height.effects$EFF <- abs ( height.effects$EFF )#
french.genos<-replicate(1000,{#
	sapply(french.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
french.num.height.alleles<-colSums(french.genos)#
#
french.heights <- colSums ( french.genos * height.effects$EFF )
sardinian.genos<-replicate(1000,{#
	sapply(sardinian.freqs$FRQ,function(p){ rbinom(n=1,size=2,prob=p)})#
})#
sardinian.num.height.alleles <- colSums ( sardinian.genos )
(sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles"  , main = "")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5 )
hist(french.num.height.alleles, col = rgb ( 1 , 0 , 0 , 0.4 ) , breaks = 50 , xlim = c ( min (sardinian.num.height.alleles ) - 5 , max ( french.num.height.alleles ) + 5 ) , ylim = c ( 0 , 60 ) , xlab = "Number of Height Alleles"  , main = "")#
hist(sardinian.num.height.alleles , col = rgb ( 0 , 0 , 1 , 0.4 ) , add = T , breaks = 50 )#
legend ( "topright" , legend = c ( "N Europe" , "S Europe" ) , pch = 15 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5 )
sardinian.heights <- colSums ( sardinian.genos * height.effects$EFF )
plot ( sardinian.heights, sardinian.num.height.alleles , pch = 20 , col = rgb ( 0 , 0 , 1 , 0.4 ) , ylab = "Number of Height Increasing Alleles" , bty = "n" , xlim = c ( 4.9 , 7 ) )#
points ( french.heights , french.num.height.alleles , pch = 20 , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
legend ( "bottomright" , legend = c ( "N Europe" , "S Europe" ) , pch = 20 , col = c ( rgb ( 1 , 0 , 0 , 0.4 )  , rgb ( 0 , 0 , 1 , 0.4 ) ) , bty = "n" , cex = 1.5)
setwd ( "~/Documents/Academics/StandingSweeps/" )#
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/freq_spectrum_standing_sweep_coal.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R', chdir = TRUE)
rm ( list = ls ())
setwd ( "~/Documents/Academics/StandingSweeps/" )#
source('~/Documents/Academics/StandingSweeps/Scripts/SweepFromStandingSim.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/freq_spectrum_standing_sweep_coal.R', chdir = TRUE)#
source('~/Documents/Academics/StandingSweeps/Scripts/run.ms.functions.R', chdir = TRUE)
options ( scipen = 400 )
my.N <- 10000#
my.rs <- c ( 0 , 0.0000001 , 0.00001 , 0.00001 , 0.001 , 0.004 , 0.008 , 0.012 , 0.016 , 0.02 ) #c ( 0.0001 , 0.001 , 0.01 , 0.05 , 0.1 , 0.5 ) #
#my.fs <- c ( 0.001 , 0.01 , 0.025 , 0.05 , 0.075 , 0.1 )#
my.fs <- c ( 0.025 , 0.05 , 0.1 )#
s <- 0.05
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f,s,new.muts=FALSE){#
	#recover()#
	my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( 0 < g | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
#
						}#
						if ( FALSE ) {#
						terms.given.j [ j , k ] <-  freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]#
						stopifnot( H <= 1 , H >= 0 )#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
#
	return ( my.freq.specs )#
}
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f,s,new.muts=FALSE){#
	recover()#
	my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( 0 < g | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
#
						}#
						if ( FALSE ) {#
						terms.given.j [ j , k ] <-  freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]#
						stopifnot( H <= 1 , H >= 0 )#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
#
	return ( my.freq.specs )#
}
blah <- expected.freq.times.standing.w.sweep ( nsam = 12 , N = 10000 , r = 0.0001 , f = 0.05 , s = 0.05 )
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( 0 < g | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
#
						}#
						if ( FALSE ) {#
						terms.given.j [ j , k ] <-  freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]#
						stopifnot( H <= 1 , H >= 0 )#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
Q
plbarjkn <- function ( l , j , k , n ) {#
	#recover()#
	#####################
	#### special cases #####
	#####################
	if ( l == 0 & j == 0 ) 	return ( 1 )#
	if ( j == k & n == l )	return ( 1 )#
	if ( k == n & j == l )	return ( 1 )#
	if ( j == k & n != l )	return ( 0 )#
	if ( l > 0 & j == 0 ) 	return ( 0 )#
	if ( l == 0 & j > 0 ) 	return ( 0 )#
	if ( l > j + n - k )	return ( 0 )#
	if ( k == 1 ) {#
		if ( n == l & j == 1 ) return ( 1 )#
		if ( l != n ) return ( 0 )#
		else stop ()#
	}#
	#####################
	#### standard case #####
	#####################
	stirling.bit <- my.StirlingNumbers[ l , j ] * my.StirlingNumbers[n - l , k - j ]  / my.StirlingNumbers[ n , k ]#
	stirling.bit * choose ( n , l ) / choose ( k , j )#
}
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f,s,new.muts=FALSE){#
	recover()#
	my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( 0 < g | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
#
						}#
						if ( FALSE ) {#
						terms.given.j [ j , k ] <-  freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]#
						stopifnot( H <= 1 , H >= 0 )#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
#
	return ( my.freq.specs )#
}#
#
blah <- expected.freq.times.standing.w.sweep ( nsam = 12 , N = 10000 , r = 0.0001 , f = 0.05 , s = 0.05 )
my.StirlingNumbers<<-StirlingNumbers(nsam)
ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )
T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( 0 < g | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
#
						}#
						if ( FALSE ) {#
						terms.given.j [ j , k ] <-  freq.specs[ k + nsam - i  , j ] * H [ g , j , k , nsam - i ]#
						terms.in.sum [ k , j, l , i  ] <- ESF.prob.k [ nsam , k ] * p_l_given_k [ k , j , l ] * freq.specs [ k , j ]#
						stopifnot( H <= 1 , H >= 0 )#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
my.freq.specs
1*n
nsam
my.freq.specs [ 1 , , , nsam , ]
ls()
z <- 1
z <- 1
z <- 1
my.list <- list ()
z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
my.list
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
my.freq.specs
dim ( my.freq.specs ) [ 5 ]
for ( l in 1 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] )	#
	}
this.freq.spec <- numeric ( 13 )
for ( l in 1 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] )	#
	}
this.freq.spec
sum ( this.freq.spec )
r
r=0.01
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
this.freq.spec <- numeric ( 13 )#
	for ( l in 1 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] )	#
	}
this.freq.spec
sum ( this.freq.spec )
r=0.000001
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
this.freq.spec <- numeric ( 13 )#
	for ( l in 1 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] )	#
	}
sum ( this.freq.spec )
this.freq.spec
r=0.01
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( 13 )#
	for ( l in 1 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] )	#
	}
this.freq.spec
r
l=1
sum ( my.freq.specs [ , , , , l ] )
my.freq.specs
ESF.prob.k
r=0.000001
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
ESF.prob.k
ESF.prob.k [ nsam +1 , 2 ]
freq.specs
freq.spec
freq.specs
freq.specs [ nsam , ]
1 : dim ( my.freq.specs ) [ 5 ]
this.freq.spec <- numeric ( nsam + 1 )#
	for ( l in 2 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l ] <- sum ( my.freq.specs [ , , , , l ] ) #
	}
this.freq.spec
r=0.1
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}
this.freq.spec <- numeric ( nsam )#
	for ( l in 2 : dim ( my.freq.specs ) [ 5 ] ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) #
	}
this.freq.spec
this.freq.spec <- numeric ( nsam )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) #
	}
this.freq.spec
( dim ( my.freq.specs ) [ 5 ] - 1 )
this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) #
	}
this.freq.spec
ESF.prob.k [ nsam +1 , 2 ]
freq.specs [ nsam , ]
this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}
this.freq.spec
r
r=0.000001
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}
this.freq.spec
sum ( this.freq.spec )
r
r=0.00001
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}
this.freq.spec
sum ( this.freq.spec )
r = 0.01
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}
this.freq.spec
sum ( this.freq.spec )
ESF.prob.k [ nsam +1 , 2 ]
r=0.000000001
my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}
this.freq.spec
sum ( this.freq.spec )
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f,s,new.muts=FALSE){#
	#recover()#
	my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}#
#
	return ( this.freq.spec )#
}
Q
expected.freq.times.standing.w.sweep<-function(nsam,N,r,distance,f,s,new.muts=FALSE){#
	#recover()#
	my.StirlingNumbers<<-StirlingNumbers(nsam)#
	ESF.prob.k <- EwensDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.prob.k <- rbind ( c ( 1 , rep ( 0 , nsam ) ) , cbind ( rep ( 0 , nsam ) , ESF.prob.k ) )#
	ESF.condprob.k<-EwensCondDist( n=nsam , N =N, r=r , distance=1 , f=f)#
	ESF.condprob.k <- rbind ( c ( rep ( 0 , nsam + 1 ) ) , cbind ( rep ( 0 , nsam ) , ESF.condprob.k ) )#
	T_f <- log ( (2*N -1 ) * ( 1 - f ) / f ) / s#
	my.logistic <- function ( x ) 1 / (2 * N  ) * exp(s * x ) / ( 1 + 1 / (2 * N  ) * ( exp(s * x )  - 1 ) )#
	T_sf <- integrate ( my.logistic , 0 , T_f )$value#
	P_NR <- exp ( - r * T_sf )#
	expected.t.l<-rep(NA,nsam-1)#
	p_l_given_k <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	H <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	cond.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	freq.specs <- matrix ( 0 , nrow = nsam , ncol = nsam )#
	for ( i in 2 : nsam ) {#
		freq.specs [ 1 : ( i - 1 ) , i ] <- ( 1 / ( 1 : ( i - 1 ) ) ) / ( sum ( 1 / ( 1 : ( i - 1  )  ) ) )#
	}#
	freq.specs <- t ( freq.specs )#
	my.freq.specs <- array ( 0 , dim = c ( nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 , nsam + 1 ) )#
	z <- 1#
	my.list <- list ()#
	for ( l in 1 : ( nsam - 1 ) ) {#
	#	recover()#
	#	terms.in.sum<-rep(0,nsam)#
		for ( i in 0 : nsam ) {#
			for ( k in min ( 1 , i ) : i ) {#
				terms.given.j <- matrix ( 0 , ncol = nsam , nrow = nsam )#
				for ( j in 1 : min ( k + nsam - i , l ) ) {#
					if ( max ( 0 , ( j - k ) ) > min ( l , nsam - i , j ) ) next#
					g.sec <- seq ( max ( 0 , ( j - k ) ) ,  min ( l , nsam - i , j ) , 1 )#
					for ( g in g.sec ) {#
						# if the number of lineages sitting under the beneficial mutatation is smaller than the number we need to get to l, the prob is zero#
						if ( i < ( l - g ) ) next#
						p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- plbarjkn ( l - g , j - g , k , i )#
						H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- choose ( nsam - i , g ) * choose ( k , j - g ) / choose ( k + nsam - i , j )#
						cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- freq.specs [ k + nsam - i , j ] * H [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] * p_l_given_k [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						if ( g > 0 | i != nsam ) {#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
						} else{#
							my.list [[ z ]] <- c ( k + 1 , j + 1 , g + 1 , i + 1 , l + 1 )#
							my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.prob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							#my.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ] <- dbinom ( i , nsam , P_NR ) * ESF.condprob.k [ i  + 1 , k + 1 ] * cond.freq.specs [ k + 1 , j + 1 , g + 1 , i + 1 , l + 1 ]#
							z <- z + 1#
						}#
					}#
				}#
			}#
		}#
	#	expected.t.l[l]<-sum(terms.in.sum)#
	}#
	this.freq.spec <- numeric ( nsam - 1 )#
	for ( l in 2 : ( dim ( my.freq.specs ) [ 5 ] - 1 ) ) {#
		this.freq.spec [ l - 1 ] <- sum ( my.freq.specs [ , , , , l ] ) + ESF.prob.k [ nsam +1 , 2 ] * freq.specs [ nsam , l - 1 ]#
	}#
#
	return ( this.freq.spec )#
}
blah <- expected.freq.times.standing.w.sweep ( nsam = 12 , N = 10000 , r = 0.0001 , f = 0.05 , s = 0.05 )
blah
load("/Users/JeremyBerg/Documents/Academics/StandingSweeps/Sims/withsweep.freq.spec.list.Rdata")
ls()
length ( withsweep.freq.spec.list)
length ( withsweep.freq.spec.list[[1]])
withsweep.freq.spec.list[[1]]
