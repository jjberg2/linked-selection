ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )
ts_true
ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )
ts_true
hist ( ts_true , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
mean ( ts_true)
mean ( ts_mean)
new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))
ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )
mean ( ts_mean)
mean ( var_mean)
mean ( ts_true)
var ( ts_true)
var ( var_mean)
var ( ts_mean)
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
var_true
mean ( var_true)
var ( var_true)
Q
MakeVar ( 0.5 , 10000 , 0.01 , 2 )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop ) {#
	#recover()#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
}#
MakeVar ( 0.5 , 10000 , 0.01 , 2 )
ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )
hist ( ts_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )
hist ( ts_true , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_mean , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
par ( mfrow = c ( 1 ,2 ))
hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )
par ( mfrow = c ( 1 ,1 ))
var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )
hist ( var_true , breaks = 50 , freq = F )
curve ( dchisq ( x , n_pop  ) , add = T , col = "red")
rand = T
if ( rand ) p <- runif ( n_rep )
p
new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )
p
p <- runif ( n_rep )
p
p <- runif ( n_rep )
p
n_loc = 100
p <- runif ( n_loc * n_rep )
length(p)
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_pop )
p
dim(p)
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
dim(p)
p[,1]
p[,1] * diag ( 100 )
p[,1] * (1-p[,1] )* diag ( 100 )
apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , x  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) ) )
x
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) ) )
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_pop ) )
n_loc
rmvnorm ( 1 , 0  , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) )
rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
dim(new_ps)
head(new_ps)
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- apply ( new_ps , 2 , function ( x ) sum ( x * ( 1 - x ) ) )
vars_t
colSums ( new_ps * ( 1 - new_ps ) )
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
p * ( 1 - p )
colSums ( p * ( 1 - p ) )
vars_t
vars_0 <- colSums ( p * ( 1 - p ) )
vars_0 - vars_t
Fst * vars_0
( vars_0 - vars_t ) / ( Fst * vars_0 )
vars_start <- colSums ( p * ( 1 - p ) )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , T , 100 )
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	recover()#
	if ( rand ) {#
		p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		( vars_start - vars_t ) / ( Fst * vars_start )#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
p
n_rep
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
vars_t
vars_start <- colSums ( p * ( 1 - p ) )
vars_start
( vars_start - vars_t ) / ( Fst * vars_start )
my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 50 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
dt
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 50 )
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 1000 )
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 200 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")
sd ( my.stat)
curve ( dnorm ( x , 1, 0.83) , add = T , col = "red")
qqplot ( my.stat , dnorm ( x , 1, 0.83))
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , 1, 1.1) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 300 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
p
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
		recover()	#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 100 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
mean ( my.stat )
var ( my.stat )
sd ( my.stat )
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
warnings()
p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )
new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )
new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)
new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)
vars_t <- colSums ( new_ps * ( 1 - new_ps ) )
vars_start <- colSums ( p * ( 1 - p ) )
vars_start
vars_t
vars_start
my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
vars_start - vars_t
hist ( vars_start - vars_t , breaks = 50 , freq = F )
Q
MakeVar ( 0.25 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
n_loc
Q
MakeVar <- function ( p , n_rep , Fst , n_pop , rand , n_loc ) {#
	if ( rand ) {#
		#p <- matrix ( runif ( n_loc * n_rep )	, nrow = n_loc , ncol = n_rep )#
		#p <- matrix ( rnorm ( n_loc * n_rep , p , 0.01 )	, nrow = n_loc , ncol = n_rep )#
		p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )#
		hist ( my.stat , breaks = 50 , freq = F)#
		curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")#
		recover()	#
#
		mean ( my.stat )#
		var ( my.stat )#
		sd ( my.stat )#
	} else {#
	new_ps <- p + rmvnorm ( n_rep , sigma = Fst * p * ( 1 - p ) * diag ( n_pop ) )#
	new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
	new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
	}#
	p_bars <- rowMeans ( new_ps )#
	par ( mfrow = c ( 2,2))#
	recover()#
	#####
	ts_mean <- (n_pop - 1 ) * ( p_bars * ( 1 - p_bars ) - rowMeans ( new_ps * ( 1 - new_ps ) ) ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( ts_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	var_mean <- rowSums ( ( new_ps- p_bars )^2 ) / ( Fst * p_bars * ( 1 - p_bars ) )#
	hist ( var_mean , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop - 1  ) , add = T , col = "red")#
	#####
	ts_true <- (n_pop ) * ( p * ( 1 - p ) - rowMeans ( new_ps * ( 1 - new_ps ) ) )  / ( Fst * ( p * ( 1 - p ) ) )#
	hist ( ts_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	#####
	var_true <- rowSums ( ( new_ps- p )^2 ) / ( Fst * p * ( 1 - p ) )#
	hist ( var_true , breaks = 50 , freq = F )#
	curve ( dchisq ( x , n_pop  ) , add = T , col = "red")#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
	hist ( ts_true , breaks = 50 , freq = F , col = rgb ( 1 , 0 , 0 , 0.4 ) )#
#
}#
MakeVar ( 0.5 , 10000 , 0.01 , 2 , rand = T , n_loc = 10 )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p=0.45
p <- matrix ( p	, nrow = n_loc , ncol = n_rep )#
		new_ps <- apply ( p , 2 , function ( x ) x + rmvnorm ( 1 , sigma = Fst * x * ( 1 - x ) * diag ( n_loc ) ) )#
		new_ps <- ifelse ( new_ps < 0 , 0 , new_ps)#
		new_ps <- ifelse ( new_ps > 1 , 1 , new_ps)#
		vars_t <- colSums ( new_ps * ( 1 - new_ps ) )#
		vars_start <- colSums ( p * ( 1 - p ) )#
		my.stat <- ( vars_start - vars_t ) / ( Fst * vars_start )
hist ( my.stat , breaks = 50 , freq = F)
curve ( dnorm ( x , mean ( my.stat ), sd ( my.stat )) , add = T , col = "red")
p <- numeric ( n_loc * n_rep )
p
tmp <- runif ( )
tmp <- runif ( 1 )
tmp
blah <- integrate( function ( x ) 1/ x  , 0 , 1 )
blah <- integrate( function ( x ) 1/ x  , 0.00001 , 1 )
blah
integrate( function ( x ) 1/ x  , 0.000001 , 1 )
integrate( function ( x ) 1/ x  , 0.0000001 , 1 )
integrate( function ( x ) 1/ x  , 0.00000001 , 1 )
1/20000
integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
tmp <- runif ( 1 )
tmp
denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
1/tmp
(1/tmp)/denom
denom
names(denom)
denom$value
(1/tmp)/denom$value
n_rep
tmp
p <- numeric ( n_loc * n_rep )
i = 1 #
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
hist ( p , breaks = 500 , freq = F)
hist ( p , breaks = 50 , freq = F)
tmp =0.0001
denom
denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )
denom
1/tmp
(1/tmp)/denom$value
tmp
tmp = 0.0000001
tmp < 1/20000
p <- numeric ( n_loc * n_rep )#
		i = 1 #
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			if ( tmp < 1/20000 | tmp > ( 1 - 1/20000 ) ) next#
			denom <- integrate( function ( x ) 1/ x  , 1/20000 , 19999/20000 )#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
hist ( p , breaks = 50)
denom <- integrate( function ( x ) 1/ x  , 0.00000000000000001 , 1 )
denom
p <- numeric ( n_loc * n_rep )#
		i = 1 #
		denom <- integrate( function ( x ) 1/ x  , 0.00000000000000001 , 1 )#
		while ( i <= n_loc * n_rep ) {#
			tmp <- runif ( 1 )#
			if ( tmp < 1/20000 | tmp > ( 1 - 1/20000 ) ) next#
			if ( runif ( 1 ) < (1/tmp)/denom$value ) {#
				p [ i ] <- tmp#
				i <- i + 1#
			} else {#
				next#
			}#
		}
p
SoftSweepSim <- function ( N_A , N_a , s1 , s2 = NULL , h , switch = 0 , mu , gens , mut.index = 1001 , stop.at.fix = TRUE , reuse.mutant.classes = FALSE , suppress.output = FALSE , suppress.plot = FALSE , sort.mutation.time = FALSE ) {#
	options ( error = recover )#
	###########################
	####### Initialize ########
	##########################	#
	num.A.class <- length ( N_A )#
	num.a.class <- length ( N_a )#
	pA.vect <- matrix ( c ( N_A / sum ( N_A , N_a ), rep ( 0, length ( N_A ) ) ) , nrow = num.A.class , ncol = 1 )	#
	pa.vect <- matrix ( c ( N_a / sum ( N_A , N_a ), rep ( 0, length ( N_a ) ) ) , nrow = num.a.class , ncol = 1 )	#
	A.classes <- 1 : num.A.class#
	a.classes <- mut.index : ( mut.index + num.a.class -1 )#
	if ( switch > 0 ){#
		s <- s1#
	} else {#
		s <- s2#
	}#
	allele.classes.all <- c ( A.classes , mut.index : ( mut.index + ( num.a.class - 1 ) ) )#
	pA.presel <- matrix ( N_A / sum ( N_A , N_a ) )#
	pa.presel <- matrix ( N_a / sum ( N_A , N_a ) )#
	###########################
	####### Simulation ########
	###########################
	i <- 1#
	while ( ( sum ( pa.vect [ , i ] ) < 1 | stop.at.fix == FALSE ) & i < gens ) {#
		if ( mu == 0 & sum ( N_a ) == 0 ) {#
			cat ( "Allele lost from population. \n")#
			return()#
		}#
		################
		## selection ###
		################
		pA.vect <- cbind ( pA.vect , 0 )#
		pa.vect <- cbind ( pa.vect , 0 )#
		pA.temp <- rowSums ( pA.presel %*% t ( pA.presel ) ) + rowSums ( pA.presel %*% t ( pa.presel ) ) * ( 1 + s )#
		pa.temp <- colSums ( pa.presel %*% t ( pa.presel ) ) * ( 1 + 2*s ) + colSums ( pA.presel %*% t ( pa.presel ) ) * ( 1 + s )#
		mean.fitness <- sum( pA.presel %*% t ( pA.presel ) ) + 2*sum ( pA.presel %*% t ( pa.presel ) )*( 1 + s ) + sum( pa.presel %*% t ( pa.presel ) ) * ( 1 + 2*s )#
		pA.postsel <- pA.temp / mean.fitness#
		pa.postsel <- pa.temp / mean.fitness#
		pA.vect [ , i + 1 ] <- pA.postsel#
		pa.vect [ , i + 1 ] <- c ( pa.postsel , rep ( 0 , nrow ( pa.vect ) - length ( pa.postsel ) ) )#
		############
		## drift ###
		############
		next.gen <- sample ( c ( A.classes , a.classes ) , size = sum ( N_A , N_a ) , prob = c ( pA.vect [ , i + 1 ] , pa.vect [ , i + 1 ] ) , replace = TRUE )#
		next.gen <- sort ( next.gen )#
		allele.classes.present <- rle ( next.gen )$values#
		allele.classes.absent <- allele.classes.all [ allele.classes.all %in% allele.classes.present == FALSE ]#
		allele.abundance <- c ( rle ( next.gen )$lengths , rep ( 0 , length ( allele.classes.absent ) ) )#
		allele.classes.all <- c ( allele.classes.present , allele.classes.absent )#
		allele.abundance <- allele.abundance [ order ( allele.classes.all ) ]#
		allele.classes.all <- allele.classes.all [ order ( allele.classes.all ) ]#
		A.classes <- allele.classes.all [ allele.classes.all < mut.index ] #
		a.classes <- allele.classes.all [ allele.classes.all >= mut.index ] #
		N_A <- allele.abundance [ allele.classes.all < mut.index ]#
		N_a <- allele.abundance [ allele.classes.all >= mut.index ]#
		pA.premut <- matrix ( N_A / sum ( N_A , N_a ) )#
		pa.premut <- matrix ( N_a / sum ( N_A , N_a ) )		#
		###############
		## mutation ###
		###############
		if ( mu != 0 ) {#
			## roll N_total uniform random numbers; the number that are less than 	#
			mut.probs <- runif ( n = sum ( N_A , N_a ) )#
			new.mutations <- sum ( mut.probs < mu )#
			if ( new.mutations != 0 ) {#
				# let the mutations pick parents in proportion to their frequency#
				mut.from <- sort ( sample ( c ( rep ( A.classes , times = N_A ) , rep ( a.classes , times = N_a ) ) , size = new.mutations , replace = FALSE ) )#
				mutating.alleles <- rle ( mut.from )$values#
				non.mutating.alleles <- allele.classes.all [ allele.classes.all %in% mutating.alleles == FALSE ]#
				mutation.counts.all.alleles <- c ( rle ( mut.from )$lengths , rep ( 0 , length ( non.mutating.alleles ) ) )#
				mutation.id.all.alleles <- c ( mutating.alleles , non.mutating.alleles )#
				mutation.counts.all.alleles <- mutation.counts.all.alleles [ order ( mutation.id.all.alleles ) ]#
				mutation.id.all.alleles <- mutation.id.all.alleles [ order ( mutation.id.all.alleles ) ]#
				mut.from.A <- mutation.counts.all.alleles [ mutation.id.all.alleles < mut.index ]#
				mut.from.a <- mutation.counts.all.alleles [ mutation.id.all.alleles >= mut.index ]#
				if ( reuse.mutant.classes == TRUE ) {#
					idx <- c( a.classes [ N_a == 0 ] , ( max ( mutation.id.all.alleles ) + 1 ) : ( max ( mutation.id.all.alleles ) + new.mutations ) )#
					new.mut.idx <- idx [ 1 : new.mutations ]#
					new.IDs <- new.mut.idx [ new.mut.idx %in% a.classes == FALSE ]#
				} else if ( reuse.mutant.classes == FALSE ) {#
					new.mut.idx <- new.IDs <- ( max ( mutation.id.all.alleles ) + 1 ) : ( max ( mutation.id.all.alleles ) + new.mutations )#
				}#
				a.classes <- c ( a.classes, new.IDs )#
				N_a <- c ( N_a , rep ( 0 , length ( new.IDs ) ) )#
				pa.vect <- rbind ( pa.vect , matrix ( 0 , nrow = length ( new.IDs ) , ncol = ncol ( pa.vect ) ) )#
				N_a [ a.classes %in% new.mut.idx ] <- 1#
				N_A <- N_A - mut.from.A#
				N_a [ a.classes %in% new.IDs == FALSE ] <- N_a [ a.classes %in% new.IDs == FALSE ] - mut.from.a#
				allele.classes.all <- c ( A.classes , a.classes )#
			}#
		}#
		##################
		## bookkeeping ###
		#################		#
		if ( i == switch & is.null ( s2 ) == FALSE ) {#
			s <-  s2 #
		}#
		i <- i + 1#
		pA.presel <- matrix ( N_A / sum ( N_A , N_a ) )#
		pa.presel <- matrix ( N_a / sum ( N_A , N_a ) )#
		if ( i %% 20 == 0 & suppress.output == FALSE ){#
			cat (  i , "p =" , sum ( pa.vect [ , i ] ) , "\n" )#
		}#
	}#
	if ( switch > 100 ) {#
		pre.switch.freqs <- pa.vect [ , 101:switch ]#
	} else {#
		pre.switch.freqs <- NULL#
		mean.coal.prob.sim.mut.sel.drift <- NULL#
		coal.prob.sim.mut.sel.drift <- NULL#
	}#
	###########################
	##### End Point Data ######
	###########################
	pA.order <- order ( pA.vect [ , ncol ( pA.vect ) ] , decreasing = FALSE ) #
	pa.order <- order ( pa.vect [ , ncol ( pa.vect ) ] , decreasing = FALSE )#
	pa.lost <-  which ( pa.vect [ , ncol ( pa.vect ) ] == 0 )#
	pa.fixed <- which ( pa.vect [ , ncol ( pa.vect ) ] != 0 )#
	all.freqs <- rbind ( pa.vect [ pa.order , ] , pA.vect [ pA.order , ] )#
	all.freqs.unsorted <- rbind ( pa.vect , pA.vect )#
	###########################
	######## Plotting #########
	###########################
	if ( suppress.plot == FALSE ) {#
		if ( reuse.mutant.classes == TRUE ) {	#
			#recover()#
			cum.freqs <- rbind ( 0 , apply ( all.freqs , 2 , cumsum ))#
			green.mat <- matrix ( c ( rep ( 0 , length ( pa.order ) + 1 ) , seq ( from = .3 , to = 1 , length.out = length ( pa.order ) + 1 ) , rep ( 0 , length ( pa.order ) +1 ) ) , nrow = length ( pa.order ) + 1 )#
			blue.mat <- matrix ( c ( rep ( 0 , 2 * length ( pA.order ) ) , seq ( from = .7 , to = 1 , length.out = length ( pA.order ) ) ) , nrow = length ( pA.order ) )#
			col.vect <- rgb ( rbind ( green.mat , blue.mat) , alpha = .65 , maxColorValue = 1 )#
		} else if ( sort.mutation.time == FALSE ) {#
			cum.freqs <- rbind ( 0 , apply ( all.freqs , 2 , cumsum ))#
			if ( length ( pa.lost ) != 0 ) {#
				red.mat <- matrix ( c ( seq ( from = .3 , to = 1 , length.out = length ( pa.lost ) ) [ 1 : length ( pa.lost ) ] , rep ( 0 , 2 * length ( pa.lost ) ) ) , nrow = length ( pa.lost ) )#
			} else {#
				red.mat <- matrix ( nrow = 0 , ncol = 3 )#
			}#
			green.mat <- matrix ( c ( rep ( 0 , length ( pa.fixed ) ) , rev ( seq ( from = 1 , to = .4 , length.out = length ( pa.fixed ) ) ) [ 1 : length ( pa.fixed ) ] , rep ( 0 , length ( pa.fixed ) ) ) , nrow = length ( pa.fixed ) )#
			blue.mat <- matrix ( c ( rep ( 0 , 2 * length ( pA.order ) ) , seq ( from = .7 , to = 1 , length.out = length ( pA.order ) ) ) , nrow = length ( pA.order ) )#
			col.vect <- rgb ( rbind ( red.mat , green.mat , blue.mat) , alpha = .65 , maxColorValue = 1 )#
		} else if ( sort.mutation.time == TRUE ) {#
			cum.freqs <-  apply ( all.freqs.unsorted , 2 , cumsum )#
			if ( length ( pa.lost ) != 0 ) {#
				red.mat <- matrix ( c ( seq ( from = .3 , to = 1 , length.out = length ( pa.lost ) ) [ 1 : length ( pa.lost ) ] , rep ( 0 , 2 * length ( pa.lost ) ) ) , nrow = length ( pa.lost ) )#
			} else {#
				red.mat <- matrix ( nrow = 0 , ncol = 3 )#
			}#
			green.mat <- matrix ( c ( rep ( 0 , length ( pa.fixed ) ) , rev ( seq ( from = 1 , to = .4 , length.out = length ( pa.fixed ) ) ) [ 1 : length ( pa.fixed ) ] , rep ( 0 , length ( pa.fixed ) ) ) , nrow = length ( pa.fixed ) )#
			blue.mat <- matrix ( c ( rep ( 0 , 2 * length ( pA.order ) ) , seq ( from = .7 , to = 1 , length.out = length ( pA.order ) ) ) , nrow = length ( pA.order ) )#
			col.vect <- character ( nrow ( cum.freqs ) )#
			col.vect [ pa.lost ] <- rgb ( red.mat , alpha = .65 , maxColorValue = 1 )#
			col.vect [ pa.fixed ] <- rgb ( green.mat , alpha = .65 , maxColorValue = 1 )#
			col.vect [ ( nrow ( pa.vect ) + 1 ) : nrow ( cum.freqs ) ] <- rgb ( blue.mat , alpha = .65 , maxColorValue = 1 )#
		}#
	#	recover()#
		no.lines <- sum ( cum.freqs [ , ncol ( cum.freqs ) ] < 0.01 )#
		line.vector <- c ( rep ( 0 , no.lines ) , rep ( .35 , nrow ( cum.freqs ) - no.lines ) )#
		matplot ( t ( cum.freqs ) , type = "l" , lty = "solid" , lwd = line.vector , col = "black" , xlab = "Generations" , ylab = "Cumulative Frequency" , bty = "n" )#
		for ( i in 1 : ( nrow ( cum.freqs ) - 1 ) ) {#
			#i = i + 1#
			X.ax <- which ( cum.freqs [ i , ] != cum.freqs [ i + 1 , ] )#
			Y.ax1 <- cum.freqs [ i , X.ax ]#
			Y.ax2 <- cum.freqs [ i + 1 , X.ax ]#
			polygon ( x = c ( X.ax , rev ( X.ax ) ) , y = c ( Y.ax1 , rev ( Y.ax2 ) ) , lty = 0 , col = col.vect [ i ] )					#
		}#
		if ( switch > 0 ) {#
			segments (x0 = switch , y0 = 0 , y1 = 1.0 , lty = 2 )#
		}#
	}	#
	#mut.sel.max <- max(cum.freqs [ length (pa.lost ), ])#
	#matplot ( t ( cum.freqs [1: length ( c ( pa.lost , pa.fixed ) ) , ] ) , type = "l" , lty = 1 , lwd = 1 , col = "black" , ylim = c ( 0 , mut.sel.max * 1.1 ) )#
	if ( switch > 100 ) {#
		coal.prob.sim.mut.sel.drift <- numeric ( ncol ( pre.switch.freqs ) )#
		for ( i in 1 : ncol ( pre.switch.freqs ) ) {#
				coal.prob.sim.mut.sel.drift [ i ] <- sum ( ( pre.switch.freqs [ , i ] / sum ( pre.switch.freqs [ , i ] ) )^2 )#
		}#
	mean.coal.prob.sim.mut.sel.drift <- mean ( coal.prob.sim.mut.sel.drift )#
	}#
	coal.prob.sim.fix <- sum( (pa.vect [ , ncol(pa.vect) ])^2 )#
	coal.prob.theory.fix <- 1 / ( 1 + 2 * sum ( N_A , N_a ) * mu )#
	if ( s1 < 0 ) {#
		coal.prob.theory.mut.sel.determin <- 1 / ( 1 + 2 * sum ( N_A , N_a ) * mu / (1 + abs ( s1 ) ) )	#
	} else {#
		coal.prob.theory.mut.sel.determin = NULL#
	}#
	if ( suppress.output == FALSE ) {#
		cat ( "Coalescence probability from simulation for lineages sampled at fixation =" , coal.prob.sim.fix , "\n" )#
		cat ( "Coalescence probability from theory for lineages sampled at fixation =" , coal.prob.theory.fix , "\n" )#
		if ( switch > 100 ) {#
			cat ( "Coalescence probability from simulation for lineages sampled at mut-sel-drift balance =" , mean.coal.prob.sim.mut.sel.drift , "\n" )#
		}#
		cat ( "Coalescence probability from theory for lineages sampled at deterministic mut-sel balance =" , coal.prob.theory.mut.sel.determin , "\n" )#
	}#
	return ( list ( pA = pA.vect , pa = pa.vect , coal.prob.sim.fix = coal.prob.sim.fix , coal.prob.theory.fix = coal.prob.theory.fix , pre.switch.freqs = pre.switch.freqs , mean.coal.prob.sim.mut.sel.drift = mean.coal.prob.sim.mut.sel.drift , coal.prob.sim.mut.sel.drift = coal.prob.sim.mut.sel.drift) )#
}#
#
SweepReplicates <- function ( N_A , N_a , s1 , s2 = NULL , h , switch = 0 , shut.mut.off = FALSE , stop.at.fix = TRUE , reuse.mutant.classes = TRUE , mu , gens , mut.index = 1001 , reps , suppress.output = TRUE , suppress.plot = TRUE ){#
#
	recover()#
	#prob.at.fix <- numeric ( reps )#
	#prob.at.balance <- numeric ( reps * ( switch - 100 ) )#
	for ( r in 1 : reps ) {#
		temp <- SoftSweepSim ( N_A = N_A , N_a = N_a , s1 = s1 , s2 = s2 , switch = switch , stop.at.fix = stop.at.fix , reuse.mutant.classes = reuse.mutant.classes , mu = mu , gens = gens , suppress.output = suppress.output , suppress.plot = suppress.plot )#
		prob.at.fix [ r ] <- temp[[1]]#
		prob.at.balance [ ( ( switch - 100 ) * ( r - 1 ) + 1 ) : ( ( r * ( switch - 100 ) - 1 ) + 1 ) ] <- temp[[2]]#
		cat ( "rep =" , r , "\n" )#
		if ( r %% 20 == 0 ) {	#
			mean.prob.at.balance.only.present <- mean ( prob.at.balance [ 1 : r * ( switch - 100 ) ] , na.rm = TRUE )#
			prob.at.balance.zeros <- prob.at.balance#
			prob.at.balance.zeros [ is.nan ( prob.at.balance.zeros ) ] <- 0#
			mean.prob.at.balance.zeros <- mean ( prob.at.balance.zeros [ 1 : r * ( switch - 100 ) ] )#
			prob.hartl.theory <- 1 / ( 1 + 2 * sum ( N_a , N_A ) * mu * 1 / (1 + abs(s1) ) )#
			prob.fix.herm.penn <- 1 / ( 1 + 2 * sum ( N_a , N_A ) * mu )#
			prob.at.fix.sim <- mean ( prob.at.fix [1 : r ] )#
			cat ( "sim prob at balance =" , mean.prob.at.balance.only.present , "\n")#
			cat ( "hartl prob at balance =" , prob.hartl.theory , "\n")#
			cat ( "sim prob at balance w/ zeros =" , mean.prob.at.balance.zeros , "\n")#
			cat ( "herm penn prob at fix =" , prob.fix.herm.penn , "\n")#
			cat ( "sim prob at fix =" , prob.at.fix.sim , "\n")#
		}#
	}	#
	return ( list ( prob.at.fix = prob.at.fix , prob.at.balance = prob.at.balance ) )#
}#
#
DiversityPlot <- function ( N , mu.b , mu.n , l , r , s , threshold ){#
	diversity.hard <- diversity.soft <- coal.prob.soft <- coal.prob.hard <- numeric ()#
	no.mut.prob <- 1 / ( 1 + N * mu.b ) #
	no.rec.prob <- exp ( -0.5 * ( log ( N * s ) / s ) * ( l - 1 ) * r )			#
	coal.prob.soft <- no.rec.prob * no.mut.prob#
	coal.prob.hard <- no.rec.prob#
	diversity.soft <- ( ( 2 * mu.n ) / ( 1 / ( 2 * N ) ) ) * ( 1 - coal.prob.soft [ l ] )#
	diversity.hard <- ( ( 2 * mu.n ) / ( 1 / ( 2 * N ) ) ) * ( 1 - coal.prob.hard [ l ] )#
	plot ( x = c ( - rev ( l ) , l  ) , y = c ( rev ( diversity.soft ) , diversity.soft ) , type = "l" , ylim = c ( 0 , ( ( 2 * mu.n ) / ( 1 / ( 2 * N ) ) ) * 1.1 ) , xlab = "Position" , ylab = "Diversity" )#
	lines ( x = c ( - rev ( l ) , l  ) , y = c ( rev ( diversity.hard ) , diversity.hard ) , type = "l" , col = "red")#
#
	legend ( "bottomright" , legend = c ( "Soft Sweep" , "Hard Sweep" ) , lty = 1 , col = c ( "black" , "red" ) , bty = "n" )#
#
	recover()#
	neutral.diversity <- 2*mu.n/(1/(2*N))#
	min ( which ( diversity.hard > 0.99*neutral.diversity ) )#
}
temp <- SweepReplicates ( N_A = c ( 200000 ) , N_a = c ( 0 ) , s1 = -0.001 , s2 = 0.01 , switch = 0 , shut.mut.off = FALSE , stop.at.fix = TRUE , reuse.mutant.classes = TRUE , mu = 10^-5 , gens = 100000 , suppress.output = FALSE , suppress.plot = TRUE , reps = 500 )
temp <- SweepReplicates ( N_A = c ( 200000 ) , N_a = c ( 0 ) , s1 = -0.001 , s2 = 0.01 , switch = 0 , shut.mut.off = FALSE , stop.at.fix = TRUE , reuse.mutant.classes = TRUE , mu = 10^-5 , gens = 100000 , suppress.output = FALSE , suppress.plot = TRUE , reps = 500 )
temp <- SweepReplicates ( N_A = c ( 200000 ) , N_a = c ( 0 ) , s1 = -0.001 , s2 = 0.01 , switch = 0 , shut.mut.off = FALSE , stop.at.fix = TRUE , reuse.mutant.classes = TRUE , mu = 10^-5 , gens = 100000 , suppress.output = FALSE , suppress.plot = TRUE , reps = 500 )
